
skna_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d50  08009d50  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d58  08009d58  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00003fc0  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000410c  2000410c  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001be8a  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ef0  00000000  00000000  0003c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001930  00000000  00000000  0003ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a7  00000000  00000000  00041870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000d839  00000000  00000000  00042c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f2ac  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4ef3  00000000  00000000  0006f6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070d4  00000000  00000000  001445f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c94 	.word	0x08009c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009c94 	.word	0x08009c94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	start_time = HAL_GetTick();
 8000582:	f000 fddb 	bl	800113c <HAL_GetTick>
 8000586:	4603      	mov	r3, r0
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <main+0x98>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fd70 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f84c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f9f2 	bl	800097c <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 f9c8 	bl	800092c <MX_DMA_Init>
  MX_I2C1_Init();
 800059c:	f000 f902 	bl	80007a4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a0:	f000 f92e 	bl	8000800 <MX_SPI2_Init>
  MX_ADC1_Init();
 80005a4:	f000 f8ac 	bl	8000700 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80005a8:	f000 f996 	bl	80008d8 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80005ac:	f008 f9cc 	bl	8008948 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80005b0:	f000 f95c 	bl	800086c <MX_TIM6_Init>



//  	  Transmitting dma
    //HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length);
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, ADC_BUFF_LEN);
 80005b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005b8:	4917      	ldr	r1, [pc, #92]	; (8000618 <main+0x9c>)
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0xa0>)
 80005bc:	f000 fe32 	bl	8001224 <HAL_ADC_Start_DMA>
//	  	  HAL_Delay(1000);


//	  	  transmitting via uart works

	  if(data_ready_flag){
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <main+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0fa      	beq.n	80005c0 <main+0x44>
	  	  for(int i = 0; i < ADC_BUFF_LEN; i++){
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	e018      	b.n	8000602 <main+0x86>
	  		  char buffer[4];
	  		  sprintf(buffer, "%u\r\n", adc_buff[i]);
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <main+0x9c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d8:	461a      	mov	r2, r3
 80005da:	463b      	mov	r3, r7
 80005dc:	4911      	ldr	r1, [pc, #68]	; (8000624 <main+0xa8>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 feb4 	bl	800934c <siprintf>
	  		  HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005e4:	463b      	mov	r3, r7
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf2 	bl	80001d0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4639      	mov	r1, r7
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <main+0xac>)
 80005f8:	f004 fa61 	bl	8004abe <HAL_UART_Transmit>
	  	  for(int i = 0; i < ADC_BUFF_LEN; i++){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000608:	dbe2      	blt.n	80005d0 <main+0x54>
	  	  }
	  	  data_ready_flag = 0;
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <main+0xa4>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	  if(data_ready_flag){
 8000610:	e7d6      	b.n	80005c0 <main+0x44>
 8000612:	bf00      	nop
 8000614:	200003a8 	.word	0x200003a8
 8000618:	200003ac 	.word	0x200003ac
 800061c:	20000168 	.word	0x20000168
 8000620:	200023ac 	.word	0x200023ac
 8000624:	08009cac 	.word	0x08009cac
 8000628:	20000304 	.word	0x20000304

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 fea6 	bl	800938c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800069c:	2319      	movs	r3, #25
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80006a6:	2306      	movs	r3, #6
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fb6a 	bl	8003d8c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 fa2d 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fdcc 	bl	800427c <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 fa17 	bl	8000b1c <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0x98>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_ADC1_Init+0x9c>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0x98>)
 8000720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_ADC1_Init+0x98>)
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC1_Init+0xa0>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ADC1_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_ADC1_Init+0x98>)
 8000762:	f000 fd1b 	bl	800119c <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 f9d6 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000770:	2301      	movs	r3, #1
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0x98>)
 8000782:	f000 fe69 	bl	8001458 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800078c:	f000 f9c6 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000168 	.word	0x20000168
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_I2C1_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007e2:	f001 ff11 	bl	8002608 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f996 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000210 	.word	0x20000210
 80007f8:	40005400 	.word	0x40005400
 80007fc:	000186a0 	.word	0x000186a0

08000800 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_SPI2_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_SPI2_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI2_Init+0x64>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI2_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_SPI2_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI2_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI2_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI2_Init+0x64>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI2_Init+0x64>)
 8000834:	2220      	movs	r2, #32
 8000836:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_SPI2_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI2_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_SPI2_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI2_Init+0x64>)
 800084c:	220a      	movs	r2, #10
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_SPI2_Init+0x64>)
 8000852:	f003 fef3 	bl	800463c <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 f95e 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000264 	.word	0x20000264
 8000868:	40003800 	.word	0x40003800

0800086c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM6_Init+0x64>)
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_TIM6_Init+0x68>)
 800087e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_TIM6_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_TIM6_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_TIM6_Init+0x64>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_TIM6_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM6_Init+0x64>)
 800089c:	f003 ff57 	bl	800474e <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008a6:	f000 f939 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM6_Init+0x64>)
 80008b8:	f004 f838 	bl	800492c <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 f92b 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002bc 	.word	0x200002bc
 80008d4:	40001000 	.word	0x40001000

080008d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	//250000
	//115200
	//57600

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART6_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART6_UART_Init+0x4c>)
 8000910:	f004 f888 	bl	8004a24 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f8ff 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000304 	.word	0x20000304
 8000928:	40011400 	.word	0x40011400

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_DMA_Init+0x4c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <MX_DMA_Init+0x4c>)
 800093c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_DMA_Init+0x4c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2038      	movs	r0, #56	; 0x38
 8000954:	f001 f8fb 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000958:	2038      	movs	r0, #56	; 0x38
 800095a:	f001 f914 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2045      	movs	r0, #69	; 0x45
 8000964:	f001 f8f3 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000968:	2045      	movs	r0, #69	; 0x45
 800096a:	f001 f90c 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4f      	ldr	r2, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a41      	ldr	r2, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3a      	ldr	r2, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SW2_BUTTON_Pin|LED_STATUS_Pin|LO_PX_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8000a24:	482d      	ldr	r0, [pc, #180]	; (8000adc <MX_GPIO_Init+0x160>)
 8000a26:	f001 fdd5 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a30:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000a32:	f001 fdcf 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_BUTTON_GPIO_Port, SW_BUTTON_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000a3e:	f001 fdc9 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW2_BUTTON_Pin LED_STATUS_Pin LO_PX_Pin */
  GPIO_InitStruct.Pin = SW2_BUTTON_Pin|LED_STATUS_Pin|LO_PX_Pin;
 8000a42:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4820      	ldr	r0, [pc, #128]	; (8000adc <MX_GPIO_Init+0x160>)
 8000a5c:	f001 fc1e 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : LO_P_Pin LO_M_Pin */
  GPIO_InitStruct.Pin = LO_P_Pin|LO_M_Pin;
 8000a60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000a76:	f001 fc11 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000a94:	f001 fc02 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : LO_MX_Pin */
  GPIO_InitStruct.Pin = LO_MX_Pin;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LO_MX_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_GPIO_Init+0x168>)
 8000aac:	f001 fbf6 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_BUTTON_Pin */
  GPIO_InitStruct.Pin = SW_BUTTON_Pin;
 8000ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SW_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000aca:	f001 fbe7 	bl	800229c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <HAL_ADC_ConvHalfCpltCallback>:
		W25Q_Read(17, 10, 20, RxData);

}


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	//data_ready_flag = 128;
	//adc_pc = &adc_buff[0];
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	//adc_pc = &adc_buff[ADC_BUFF_LEN/2];
	data_ready_flag = 1;
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200023ac 	.word	0x200023ac

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <HAL_ADC_MspInit+0x110>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d172      	bne.n	8000c80 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_ADC_MspInit+0x114>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <HAL_ADC_MspInit+0x118>)
 8000c02:	f001 fb4b 	bl	800229c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c06:	230e      	movs	r3, #14
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000c1a:	f001 fb3f 	bl	800229c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_ADC_MspInit+0x124>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c5c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c66:	f000 ffa9 	bl	8001bbc <HAL_DMA_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000c70:	f7ff ff54 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	200001b0 	.word	0x200001b0
 8000c9c:	40026410 	.word	0x40026410

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_I2C_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_I2C_MspInit+0x8c>)
 8000cfa:	f001 facf 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12c      	bne.n	8000dac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da8:	f001 fa78 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40003800 	.word	0x40003800
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_TIM_Base_MspInit+0x3c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10d      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_TIM_Base_MspInit+0x40>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <HAL_TIM_Base_MspInit+0x40>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40001000 	.word	0x40001000
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <HAL_UART_MspInit+0xe4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d15b      	bne.n	8000ede <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_UART_MspInit+0xe8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5e:	23c0      	movs	r3, #192	; 0xc0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e7a:	f001 fa0f 	bl	800229c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_UART_MspInit+0xf4>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e86:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eba:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000ec4:	f000 fe7a 	bl	8001bbc <HAL_DMA_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ece:	f7ff fe25 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40011400 	.word	0x40011400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	20000348 	.word	0x20000348
 8000ef8:	400264a0 	.word	0x400264a0

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8e4 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA2_Stream0_IRQHandler+0x10>)
 8000f56:	f000 ff37 	bl	8001dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001b0 	.word	0x200001b0

08000f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <OTG_FS_IRQHandler+0x10>)
 8000f6a:	f001 fde1 	bl	8002b30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20003898 	.word	0x20003898

08000f78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA2_Stream6_IRQHandler+0x10>)
 8000f7e:	f000 ff23 	bl	8001dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000348 	.word	0x20000348

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f008 f9ee 	bl	800939c <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20020000 	.word	0x20020000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	200023b0 	.word	0x200023b0
 8000ff4:	20004110 	.word	0x20004110

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f008 f9ad 	bl	80093a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa95 	bl	800057c <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001060:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 8001064:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001068:	2000410c 	.word	0x2000410c

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fd4d 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fd40 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd65 	bl	8001ba2 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 fd2d 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	200023b4 	.word	0x200023b4

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200023b4 	.word	0x200023b4

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e033      	b.n	800121a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fcdc 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e2:	f023 0302 	bic.w	r3, r3, #2
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fa54 	bl	800169c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	e001      	b.n	8001210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e0e9      	b.n	8001416 <HAL_ADC_Start_DMA+0x1f2>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d018      	beq.n	800128a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_ADC_Start_DMA+0x1fc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6d      	ldr	r2, [pc, #436]	; (8001424 <HAL_ADC_Start_DMA+0x200>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9a      	lsrs	r2, r3, #18
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3b01      	subs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001298:	d107      	bne.n	80012aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f040 80a1 	bne.w	80013fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f023 0206 	bic.w	r2, r3, #6
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
 8001306:	e002      	b.n	800130e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_ADC_Start_DMA+0x204>)
 8001318:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131e:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_ADC_Start_DMA+0x208>)
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_ADC_Start_DMA+0x20c>)
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a41      	ldr	r2, [pc, #260]	; (8001434 <HAL_ADC_Start_DMA+0x210>)
 8001330:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800133a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800134a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800135a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	334c      	adds	r3, #76	; 0x4c
 8001366:	4619      	mov	r1, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f000 fcd4 	bl	8001d18 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	2b00      	cmp	r3, #0
 800137a:	d12a      	bne.n	80013d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <HAL_ADC_Start_DMA+0x214>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d015      	beq.n	80013b2 <HAL_ADC_Start_DMA+0x18e>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2c      	ldr	r2, [pc, #176]	; (800143c <HAL_ADC_Start_DMA+0x218>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d105      	bne.n	800139c <HAL_ADC_Start_DMA+0x178>
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_ADC_Start_DMA+0x204>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00a      	beq.n	80013b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_ADC_Start_DMA+0x21c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d136      	bne.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_ADC_Start_DMA+0x204>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d130      	bne.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d129      	bne.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e020      	b.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_ADC_Start_DMA+0x214>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d11b      	bne.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d114      	bne.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	e00b      	b.n	8001414 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0210 	orr.w	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83
 8001428:	40012300 	.word	0x40012300
 800142c:	08001895 	.word	0x08001895
 8001430:	0800194f 	.word	0x0800194f
 8001434:	0800196b 	.word	0x0800196b
 8001438:	40012000 	.word	0x40012000
 800143c:	40012100 	.word	0x40012100
 8001440:	40012200 	.word	0x40012200

08001444 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1c>
 8001470:	2302      	movs	r3, #2
 8001472:	e105      	b.n	8001680 <HAL_ADC_ConfigChannel+0x228>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b09      	cmp	r3, #9
 8001482:	d925      	bls.n	80014d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68d9      	ldr	r1, [r3, #12]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	3b1e      	subs	r3, #30
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43da      	mvns	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	400a      	ands	r2, r1
 80014a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68d9      	ldr	r1, [r3, #12]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4403      	add	r3, r0
 80014c2:	3b1e      	subs	r3, #30
 80014c4:	409a      	lsls	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	e022      	b.n	8001516 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6919      	ldr	r1, [r3, #16]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	2207      	movs	r2, #7
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	400a      	ands	r2, r1
 80014f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	4603      	mov	r3, r0
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4403      	add	r3, r0
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d824      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b05      	subs	r3, #5
 8001530:	221f      	movs	r2, #31
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	400a      	ands	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b05      	subs	r3, #5
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
 8001566:	e04c      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d824      	bhi.n	80015ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b23      	subs	r3, #35	; 0x23
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43da      	mvns	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b23      	subs	r3, #35	; 0x23
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	e023      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b41      	subs	r3, #65	; 0x41
 80015cc:	221f      	movs	r2, #31
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b41      	subs	r3, #65	; 0x41
 80015f6:	fa00 f203 	lsl.w	r2, r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_ADC_ConfigChannel+0x234>)
 8001604:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_ADC_ConfigChannel+0x238>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d109      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1cc>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d105      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_ADC_ConfigChannel+0x238>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d123      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x21e>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b10      	cmp	r3, #16
 8001634:	d003      	beq.n	800163e <HAL_ADC_ConfigChannel+0x1e6>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b11      	cmp	r3, #17
 800163c:	d11b      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d111      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_ADC_ConfigChannel+0x23c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_ADC_ConfigChannel+0x240>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9a      	lsrs	r2, r3, #18
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001668:	e002      	b.n	8001670 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3b01      	subs	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40012300 	.word	0x40012300
 8001690:	40012000 	.word	0x40012000
 8001694:	20000000 	.word	0x20000000
 8001698:	431bde83 	.word	0x431bde83

0800169c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a4:	4b79      	ldr	r3, [pc, #484]	; (800188c <ADC_Init+0x1f0>)
 80016a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	021a      	lsls	r2, r3, #8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	4a58      	ldr	r2, [pc, #352]	; (8001890 <ADC_Init+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001742:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e00f      	b.n	800179a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001798:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0202 	bic.w	r2, r2, #2
 80017a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7e1b      	ldrb	r3, [r3, #24]
 80017b4:	005a      	lsls	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01b      	beq.n	8001800 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	3b01      	subs	r3, #1
 80017f4:	035a      	lsls	r2, r3, #13
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	e007      	b.n	8001810 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	3b01      	subs	r3, #1
 800182c:	051a      	lsls	r2, r3, #20
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001852:	025a      	lsls	r2, r3, #9
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	029a      	lsls	r2, r3, #10
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40012300 	.word	0x40012300
 8001890:	0f000001 	.word	0x0f000001

08001894 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d13c      	bne.n	8001928 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d12b      	bne.n	8001920 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d127      	bne.n	8001920 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d119      	bne.n	8001920 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0220 	bic.w	r2, r2, #32
 80018fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff f8eb 	bl	8000afc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001926:	e00e      	b.n	8001946 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fd85 	bl	8001444 <HAL_ADC_ErrorCallback>
}
 800193a:	e004      	b.n	8001946 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff f8c3 	bl	8000ae8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f043 0204 	orr.w	r2, r3, #4
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fd5a 	bl	8001444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff fab8 	bl	800113c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e099      	b.n	8001d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf8:	e00f      	b.n	8001c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff fa9f 	bl	800113c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d908      	bls.n	8001c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e078      	b.n	8001d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e8      	bne.n	8001bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_DMA_Init+0x158>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d117      	bne.n	8001cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa6f 	bl	80021a4 <DMA_CheckFifoParam>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa26 	bl	8002138 <DMA_CalcBaseAndBitshift>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	f010803f 	.word	0xf010803f

08001d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Start_IT+0x26>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e040      	b.n	8001dc0 <HAL_DMA_Start_IT+0xa8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d12f      	bne.n	8001db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f9b8 	bl	80020dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0216 	orr.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd4:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_DMA_IRQHandler+0x248>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a8e      	ldr	r2, [pc, #568]	; (8002014 <HAL_DMA_IRQHandler+0x24c>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2208      	movs	r2, #8
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2208      	movs	r2, #8
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2201      	movs	r2, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2204      	movs	r2, #4
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d012      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d043      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03c      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	e01f      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e016      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0208 	bic.w	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 808f 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8087 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2220      	movs	r2, #32
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d136      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0216 	bic.w	r2, r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x1da>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	223f      	movs	r2, #63	; 0x3f
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
        }
        return;
 8001fde:	e079      	b.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01d      	beq.n	800202a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d031      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e02c      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000
 8002014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e01e      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0210 	bic.w	r2, r2, #16
 8002046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d032      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d022      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2205      	movs	r2, #5
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d307      	bcc.n	80020b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_DMA_IRQHandler+0x2cc>
 80020ae:	e000      	b.n	80020b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e000      	b.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d4:	bf00      	nop
    }
  }
}
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d108      	bne.n	800211c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211a:	e007      	b.n	800212c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b10      	subs	r3, #16
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <DMA_CalcBaseAndBitshift+0x64>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d909      	bls.n	800217a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
 8002178:	e007      	b.n	800218a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	aaaaaaab 	.word	0xaaaaaaab
 80021a0:	08009d14 	.word	0x08009d14

080021a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d856      	bhi.n	8002272 <DMA_CheckFifoParam+0xce>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x28>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021ef 	.word	0x080021ef
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	08002273 	.word	0x08002273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d046      	beq.n	8002276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ec:	e043      	b.n	8002276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f6:	d140      	bne.n	800227a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e03d      	b.n	800227a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d121      	bne.n	800224c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d837      	bhi.n	800227e <DMA_CheckFifoParam+0xda>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <DMA_CheckFifoParam+0x70>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222b 	.word	0x0800222b
 800221c:	08002225 	.word	0x08002225
 8002220:	0800223d 	.word	0x0800223d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e030      	b.n	800228c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d025      	beq.n	8002282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e022      	b.n	8002282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002244:	d11f      	bne.n	8002286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224a:	e01c      	b.n	8002286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d903      	bls.n	800225a <DMA_CheckFifoParam+0xb6>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002258:	e018      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      break;
 800225e:	e015      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e00b      	b.n	800228a <DMA_CheckFifoParam+0xe6>
      break;
 8002272:	bf00      	nop
 8002274:	e00a      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e008      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e006      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e004      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;   
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
    }
  } 
  
  return status; 
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e16b      	b.n	8002590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 815a 	bne.w	800258a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80b4 	beq.w	800258a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a5f      	ldr	r2, [pc, #380]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a5b      	ldr	r2, [pc, #364]	; (80025ac <HAL_GPIO_Init+0x310>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <HAL_GPIO_Init+0x314>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d02b      	beq.n	80024c2 <HAL_GPIO_Init+0x226>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_GPIO_Init+0x318>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d025      	beq.n	80024be <HAL_GPIO_Init+0x222>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <HAL_GPIO_Init+0x31c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01f      	beq.n	80024ba <HAL_GPIO_Init+0x21e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <HAL_GPIO_Init+0x320>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d019      	beq.n	80024b6 <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <HAL_GPIO_Init+0x328>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00d      	beq.n	80024ae <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4c      	ldr	r2, [pc, #304]	; (80025c8 <HAL_GPIO_Init+0x32c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4b      	ldr	r2, [pc, #300]	; (80025cc <HAL_GPIO_Init+0x330>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_GPIO_Init+0x20a>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e00e      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e00c      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e00a      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024c2:	2300      	movs	r3, #0
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <HAL_GPIO_Init+0x310>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_GPIO_Init+0x334>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002506:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_GPIO_Init+0x334>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x334>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	f67f ae90 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40021400 	.word	0x40021400
 80025c8:	40021800 	.word	0x40021800
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e12b      	b.n	8002872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fb36 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800266c:	f001 ffbe 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8002670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a81      	ldr	r2, [pc, #516]	; (800287c <HAL_I2C_Init+0x274>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d807      	bhi.n	800268c <HAL_I2C_Init+0x84>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a80      	ldr	r2, [pc, #512]	; (8002880 <HAL_I2C_Init+0x278>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e006      	b.n	800269a <HAL_I2C_Init+0x92>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <HAL_I2C_Init+0x27c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	bf94      	ite	ls
 8002694:	2301      	movls	r3, #1
 8002696:	2300      	movhi	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0e7      	b.n	8002872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a78      	ldr	r2, [pc, #480]	; (8002888 <HAL_I2C_Init+0x280>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a6a      	ldr	r2, [pc, #424]	; (800287c <HAL_I2C_Init+0x274>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d802      	bhi.n	80026dc <HAL_I2C_Init+0xd4>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	e009      	b.n	80026f0 <HAL_I2C_Init+0xe8>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_I2C_Init+0x284>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	3301      	adds	r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	495c      	ldr	r1, [pc, #368]	; (800287c <HAL_I2C_Init+0x274>)
 800270c:	428b      	cmp	r3, r1
 800270e:	d819      	bhi.n	8002744 <HAL_I2C_Init+0x13c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e59      	subs	r1, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fbb1 f3f3 	udiv	r3, r1, r3
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002724:	400b      	ands	r3, r1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_I2C_Init+0x138>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e59      	subs	r1, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fbb1 f3f3 	udiv	r3, r1, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	e051      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002740:	2304      	movs	r3, #4
 8002742:	e04f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <HAL_I2C_Init+0x168>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e58      	subs	r0, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e012      	b.n	8002796 <HAL_I2C_Init+0x18e>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Init+0x196>
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10e      	bne.n	80027c4 <HAL_I2C_Init+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1e58      	subs	r0, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	440b      	add	r3, r1
 80027b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	0099      	lsls	r1, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6911      	ldr	r1, [r2, #16]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	000186a0 	.word	0x000186a0
 8002880:	001e847f 	.word	0x001e847f
 8002884:	003d08ff 	.word	0x003d08ff
 8002888:	431bde83 	.word	0x431bde83
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	b08f      	sub	sp, #60	; 0x3c
 8002894:	af0a      	add	r7, sp, #40	; 0x28
 8002896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e10f      	b.n	8002ac2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f006 fa23 	bl	8008d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fd76 	bl	80053d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	687e      	ldr	r6, [r7, #4]
 80028ee:	466d      	mov	r5, sp
 80028f0:	f106 0410 	add.w	r4, r6, #16
 80028f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002900:	e885 0003 	stmia.w	r5, {r0, r1}
 8002904:	1d33      	adds	r3, r6, #4
 8002906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	f002 fc4d 	bl	80051a8 <USB_CoreInit>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d0      	b.n	8002ac2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fd64 	bl	80053f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e04a      	b.n	80029c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	333d      	adds	r3, #61	; 0x3d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	333c      	adds	r3, #60	; 0x3c
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	b298      	uxth	r0, r3
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3344      	adds	r3, #68	; 0x44
 800296e:	4602      	mov	r2, r0
 8002970:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3340      	adds	r3, #64	; 0x40
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3348      	adds	r3, #72	; 0x48
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334c      	adds	r3, #76	; 0x4c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3354      	adds	r3, #84	; 0x54
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3af      	bcc.n	8002932 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e044      	b.n	8002a62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3b5      	bcc.n	80029d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687e      	ldr	r6, [r7, #4]
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f002 fcfc 	bl	800548c <USB_DevInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00d      	b.n	8002ac2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fe4b 	bl	8006756 <USB_DevDisconnect>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_Start+0x1c>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e020      	b.n	8002b28 <HAL_PCD_Start+0x5e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d109      	bne.n	8002b0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fc4e 	bl	80053b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fdfb 	bl	8006714 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b08d      	sub	sp, #52	; 0x34
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 feb9 	bl	80068be <USB_GetMode>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 848a 	bne.w	8003468 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fe1d 	bl	8006798 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8480 	beq.w	8003466 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fe0a 	bl	8006798 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f002 0202 	and.w	r2, r2, #2
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fdf8 	bl	8006798 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d161      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0210 	bic.w	r2, r2, #16
 8002bc0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	3304      	adds	r3, #4
 8002be0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	0c5b      	lsrs	r3, r3, #17
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d124      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d035      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6a38      	ldr	r0, [r7, #32]
 8002c0e:	f003 fc2f 	bl	8006470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c1e:	441a      	add	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	6a1a      	ldr	r2, [r3, #32]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c30:	441a      	add	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
 8002c36:	e016      	b.n	8002c66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	0c5b      	lsrs	r3, r3, #17
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	2b06      	cmp	r3, #6
 8002c42:	d110      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6a38      	ldr	r0, [r7, #32]
 8002c50:	f003 fc0e 	bl	8006470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c60:	441a      	add	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0210 	orr.w	r2, r2, #16
 8002c74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fd8c 	bl	8006798 <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c8a:	f040 80a7 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fd91 	bl	80067be <USB_ReadDevAllOutEpInterrupt>
 8002c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c9e:	e099      	b.n	8002dd4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 808e 	beq.w	8002dc8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fdb5 	bl	8006826 <USB_ReadDevOutEPInterrupt>
 8002cbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fec3 	bl	8003a68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 ff99 	bl	8003c38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2310      	movs	r3, #16
 8002d20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d030      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d109      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	78db      	ldrb	r3, [r3, #3]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f006 f8da 	bl	8008f30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	461a      	mov	r2, r3
 8002da6:	2320      	movs	r3, #32
 8002da8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	3301      	adds	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f af62 	bne.w	8002ca0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fcd9 	bl	8006798 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df0:	f040 80db 	bne.w	8002faa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fcfa 	bl	80067f2 <USB_ReadDevAllInEpInterrupt>
 8002dfe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e04:	e0cd      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80c2 	beq.w	8002f96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd20 	bl	8006862 <USB_ReadDevInEPInterrupt>
 8002e22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d057      	beq.n	8002ede <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e4e:	4013      	ands	r3, r2
 8002e50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d132      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	334c      	adds	r3, #76	; 0x4c
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3348      	adds	r3, #72	; 0x48
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4419      	add	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4403      	add	r3, r0
 8002ea0:	334c      	adds	r3, #76	; 0x4c
 8002ea2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x3a2>
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3354      	adds	r3, #84	; 0x54
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d108      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2101      	movs	r1, #1
 8002ece:	f003 fd27 	bl	8006920 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 ffa4 	bl	8008e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f10:	461a      	mov	r2, r3
 8002f12:	2310      	movs	r3, #16
 8002f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2340      	movs	r3, #64	; 0x40
 8002f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3e:	6a38      	ldr	r0, [r7, #32]
 8002f40:	f002 fc08 	bl	8005754 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3338      	adds	r3, #56	; 0x38
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	78db      	ldrb	r3, [r3, #3]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f005 fff1 	bl	8008f54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2302      	movs	r3, #2
 8002f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fcdb 	bl	800394c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af2e 	bne.w	8002e06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fbf2 	bl	8006798 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fbe:	d122      	bne.n	8003006 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d108      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fec3 	bl	8003d74 <HAL_PCDEx_LPM_Callback>
 8002fee:	e002      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f005 ff8f 	bl	8008f14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fbc4 	bl	8006798 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d112      	bne.n	8003042 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 ff4b 	bl	8008ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003040:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fba6 	bl	8006798 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	f040 80b7 	bne.w	80031c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2110      	movs	r1, #16
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fb6d 	bl	8005754 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e046      	b.n	800310e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308c:	461a      	mov	r2, r3
 800308e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003092:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f8:	0151      	lsls	r1, r2, #5
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	440a      	add	r2, r1
 80030fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003106:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	3301      	adds	r3, #1
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d3b3      	bcc.n	8003080 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800312a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003144:	f043 030b 	orr.w	r3, r3, #11
 8003148:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315a:	f043 030b 	orr.w	r3, r3, #11
 800315e:	6453      	str	r3, [r2, #68]	; 0x44
 8003160:	e015      	b.n	800318e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003174:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003178:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003188:	f043 030b 	orr.w	r3, r3, #11
 800318c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f003 fbb4 	bl	8006920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 fae3 	bl	8006798 <USB_ReadInterrupts>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031dc:	d124      	bne.n	8003228 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fb79 	bl	80068da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fb2e 	bl	800584e <USB_GetDevSpeed>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681c      	ldr	r4, [r3, #0]
 80031fe:	f001 f9e9 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 8003202:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	4620      	mov	r0, r4
 800320e:	f002 f82d 	bl	800526c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f005 fe2f 	bl	8008e76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003226:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fab3 	bl	8006798 <USB_ReadInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b08      	cmp	r3, #8
 800323a:	d10a      	bne.n	8003252 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 fe0c 	bl	8008e5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f002 0208 	and.w	r2, r2, #8
 8003250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fa9e 	bl	8006798 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d122      	bne.n	80032ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	e014      	b.n	80032a2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fb27 	bl	80038ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	3301      	adds	r3, #1
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3e5      	bcc.n	8003278 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fa71 	bl	8006798 <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c0:	d13b      	bne.n	800333a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c2:	2301      	movs	r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	e02b      	b.n	8003320 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3340      	adds	r3, #64	; 0x40
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d115      	bne.n	800331a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da12      	bge.n	800331a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	333f      	adds	r3, #63	; 0x3f
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fae8 	bl	80038ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	3301      	adds	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d3ce      	bcc.n	80032c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f003 fa2a 	bl	8006798 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334e:	d155      	bne.n	80033fc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003350:	2301      	movs	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	e045      	b.n	80033e2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d12e      	bne.n	80033dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800337e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	da2b      	bge.n	80033dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003390:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003394:	429a      	cmp	r2, r3
 8003396:	d121      	bne.n	80033dc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d8:	6053      	str	r3, [r2, #4]
            break;
 80033da:	e007      	b.n	80033ec <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	3301      	adds	r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3b4      	bcc.n	8003356 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f003 f9c9 	bl	8006798 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d10a      	bne.n	8003428 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f005 fdb0 	bl	8008f78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 f9b3 	bl	8006798 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d115      	bne.n	8003468 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f005 fda0 	bl	8008f94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	e000      	b.n	8003468 <HAL_PCD_IRQHandler+0x938>
      return;
 8003466:	bf00      	nop
    }
  }
}
 8003468:	3734      	adds	r7, #52	; 0x34
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}

0800346e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_PCD_SetAddress+0x1a>
 8003484:	2302      	movs	r3, #2
 8003486:	e013      	b.n	80034b0 <HAL_PCD_SetAddress+0x42>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 f911 	bl	80066c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	70fb      	strb	r3, [r7, #3]
 80034ca:	460b      	mov	r3, r1
 80034cc:	803b      	strh	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da0f      	bge.n	80034fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	3338      	adds	r3, #56	; 0x38
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	705a      	strb	r2, [r3, #1]
 80034fc:	e00f      	b.n	800351e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800352a:	883a      	ldrh	r2, [r7, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	78ba      	ldrb	r2, [r7, #2]
 8003534:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003548:	78bb      	ldrb	r3, [r7, #2]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d102      	bne.n	8003554 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_PCD_EP_Open+0xaa>
 800355e:	2302      	movs	r3, #2
 8003560:	e00e      	b.n	8003580 <HAL_PCD_EP_Open+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	f002 f991 	bl	8005898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800357e:	7afb      	ldrb	r3, [r7, #11]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	da0f      	bge.n	80035bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	3338      	adds	r3, #56	; 0x38
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	3304      	adds	r3, #4
 80035b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	705a      	strb	r2, [r3, #1]
 80035ba:	e00f      	b.n	80035dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f003 020f 	and.w	r2, r3, #15
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_PCD_EP_Close+0x6e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e00e      	b.n	8003614 <HAL_PCD_EP_Close+0x8c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	4618      	mov	r0, r3
 8003606:	f002 f9cf 	bl	80059a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	460b      	mov	r3, r1
 800362a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	7afb      	ldrb	r3, [r7, #11]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365e:	7afb      	ldrb	r3, [r7, #11]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	f002 fcae 	bl	8005ff0 <USB_EP0StartXfer>
 8003694:	e008      	b.n	80036a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	f002 fa5c 	bl	8005b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80036d4:	681b      	ldr	r3, [r3, #0]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	460b      	mov	r3, r1
 80036f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3338      	adds	r3, #56	; 0x38
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2201      	movs	r2, #1
 8003720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003722:	7afb      	ldrb	r3, [r7, #11]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	b2da      	uxtb	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	6979      	ldr	r1, [r7, #20]
 8003754:	f002 fc4c 	bl	8005ff0 <USB_EP0StartXfer>
 8003758:	e008      	b.n	800376c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	f002 f9fa 	bl	8005b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d901      	bls.n	8003794 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e050      	b.n	8003836 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003798:	2b00      	cmp	r3, #0
 800379a:	da0f      	bge.n	80037bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3338      	adds	r3, #56	; 0x38
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	705a      	strb	r2, [r3, #1]
 80037ba:	e00d      	b.n	80037d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_EP_SetStall+0x82>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e01e      	b.n	8003836 <HAL_PCD_EP_SetStall+0xc0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fe8a 	bl	8006520 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	b2d9      	uxtb	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003826:	461a      	mov	r2, r3
 8003828:	f003 f87a 	bl	8006920 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d901      	bls.n	800385c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e042      	b.n	80038e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800385c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	da0f      	bge.n	8003884 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	3338      	adds	r3, #56	; 0x38
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	705a      	strb	r2, [r3, #1]
 8003882:	e00f      	b.n	80038a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_ClrStall+0x86>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00e      	b.n	80038e2 <HAL_PCD_EP_ClrStall+0xa4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fe92 	bl	80065fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da0c      	bge.n	8003918 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	3338      	adds	r3, #56	; 0x38
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	3304      	adds	r3, #4
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e00c      	b.n	8003932 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fcb1 	bl	80062a0 <USB_EPStopXfer>
 800393e:	4603      	mov	r3, r0
 8003940:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003942:	7afb      	ldrb	r3, [r7, #11]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	429a      	cmp	r2, r3
 800397e:	d901      	bls.n	8003984 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06c      	b.n	8003a5e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d902      	bls.n	80039a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3303      	adds	r3, #3
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a8:	e02b      	b.n	8003a02 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d902      	bls.n	80039c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3303      	adds	r3, #3
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4603      	mov	r3, r0
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f002 fd05 	bl	80063f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	441a      	add	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d809      	bhi.n	8003a2c <PCD_WriteEmptyTxFifo+0xe0>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d203      	bcs.n	8003a2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1be      	bne.n	80039aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d811      	bhi.n	8003a5c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	2201      	movs	r2, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a58:	4013      	ands	r3, r2
 8003a5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	333c      	adds	r3, #60	; 0x3c
 8003a80:	3304      	adds	r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d17b      	bne.n	8003b96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	f240 80b9 	bls.w	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80b3 	beq.w	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad0:	6093      	str	r3, [r2, #8]
 8003ad2:	e0a7      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2320      	movs	r3, #32
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e098      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 8093 	bne.w	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	; (8003c30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d90f      	bls.n	8003b26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e07e      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	0159      	lsls	r1, r3, #5
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	440b      	add	r3, r1
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d114      	bne.n	8003b88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b70:	461a      	mov	r2, r3
 8003b72:	2101      	movs	r1, #1
 8003b74:	f002 fed4 	bl	8006920 <USB_EP0_OutStart>
 8003b78:	e006      	b.n	8003b88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	441a      	add	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f005 f92e 	bl	8008df0 <HAL_PCD_DataOutStageCallback>
 8003b94:	e046      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d124      	bne.n	8003be8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bba:	6093      	str	r3, [r2, #8]
 8003bbc:	e032      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f005 f905 	bl	8008df0 <HAL_PCD_DataOutStageCallback>
 8003be6:	e01d      	b.n	8003c24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d114      	bne.n	8003c18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c10:	461a      	mov	r2, r3
 8003c12:	2100      	movs	r1, #0
 8003c14:	f002 fe84 	bl	8006920 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f005 f8e6 	bl	8008df0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	4f54300a 	.word	0x4f54300a
 8003c34:	4f54310a 	.word	0x4f54310a

08003c38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	333c      	adds	r3, #60	; 0x3c
 8003c50:	3304      	adds	r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d90e      	bls.n	8003c8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 f89d 	bl	8008dcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d90c      	bls.n	8003cb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cac:	461a      	mov	r2, r3
 8003cae:	2101      	movs	r1, #1
 8003cb0:	f002 fe36 	bl	8006920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	4f54300a 	.word	0x4f54300a

08003cc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ce2:	883b      	ldrh	r3, [r7, #0]
 8003ce4:	0419      	lsls	r1, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e028      	b.n	8003d44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e00d      	b.n	8003d22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	3340      	adds	r3, #64	; 0x40
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3ec      	bcc.n	8003d06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d2c:	883b      	ldrh	r3, [r7, #0]
 8003d2e:	0418      	lsls	r0, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4302      	orrs	r2, r0
 8003d3c:	3340      	adds	r3, #64	; 0x40
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e267      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d075      	beq.n	8003e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003daa:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d112      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4b82      	ldr	r3, [pc, #520]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	4b7e      	ldr	r3, [pc, #504]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05b      	beq.n	8003e94 <HAL_RCC_OscConfig+0x108>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d157      	bne.n	8003e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e242      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x74>
 8003df2:	4b76      	ldr	r3, [pc, #472]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a75      	ldr	r2, [pc, #468]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x98>
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6f      	ldr	r2, [pc, #444]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b6d      	ldr	r3, [pc, #436]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6c      	ldr	r2, [pc, #432]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e24:	4b69      	ldr	r3, [pc, #420]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a68      	ldr	r2, [pc, #416]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd f97a 	bl	800113c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f976 	bl	800113c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e207      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b5b      	ldr	r3, [pc, #364]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0xc0>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f966 	bl	800113c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fd f962 	bl	800113c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1f3      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0xe8>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d063      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea2:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d116      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1c7      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4937      	ldr	r1, [pc, #220]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	e03a      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCC_OscConfig+0x244>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f02:	f7fd f91b 	bl	800113c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fd f917 	bl	800113c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1a8      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4925      	ldr	r1, [pc, #148]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e015      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_OscConfig+0x244>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd f8fa 	bl	800113c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4c:	f7fd f8f6 	bl	800113c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e187      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d036      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_RCC_OscConfig+0x248>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd f8da 	bl	800113c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd f8d6 	bl	800113c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e167      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_OscConfig+0x240>)
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x200>
 8003faa:	e01b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_OscConfig+0x248>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd f8c3 	bl	800113c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	e00e      	b.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fd f8bf 	bl	800113c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d907      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e150      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	42470000 	.word	0x42470000
 8003fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ea      	bne.n	8003fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8097 	beq.w	8004120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b81      	ldr	r3, [pc, #516]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	4b7d      	ldr	r3, [pc, #500]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a7c      	ldr	r2, [pc, #496]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b7a      	ldr	r3, [pc, #488]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b77      	ldr	r3, [pc, #476]	; (8004200 <HAL_RCC_OscConfig+0x474>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b74      	ldr	r3, [pc, #464]	; (8004200 <HAL_RCC_OscConfig+0x474>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a73      	ldr	r2, [pc, #460]	; (8004200 <HAL_RCC_OscConfig+0x474>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fd f87f 	bl	800113c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fd f87b 	bl	800113c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e10c      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <HAL_RCC_OscConfig+0x474>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x2ea>
 8004068:	4b64      	ldr	r3, [pc, #400]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a63      	ldr	r2, [pc, #396]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x324>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x30c>
 800407e:	4b5f      	ldr	r3, [pc, #380]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a5e      	ldr	r2, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a5b      	ldr	r2, [pc, #364]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x324>
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	6713      	str	r3, [r2, #112]	; 0x70
 80040a4:	4b55      	ldr	r3, [pc, #340]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a54      	ldr	r2, [pc, #336]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fd f840 	bl	800113c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fd f83c 	bl	800113c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0cb      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4b49      	ldr	r3, [pc, #292]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ee      	beq.n	80040c0 <HAL_RCC_OscConfig+0x334>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd f82a 	bl	800113c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fd f826 	bl	800113c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0b5      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004102:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ee      	bne.n	80040ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	4a38      	ldr	r2, [pc, #224]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80a1 	beq.w	800426c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b08      	cmp	r3, #8
 8004134:	d05c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d141      	bne.n	80041c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b31      	ldr	r3, [pc, #196]	; (8004204 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fc fffa 	bl	800113c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fc fff6 	bl	800113c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e087      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	491b      	ldr	r1, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x478>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fc ffcf 	bl	800113c <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fc ffcb 	bl	800113c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e05c      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x416>
 80041c0:	e054      	b.n	800426c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x478>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fc ffb8 	bl	800113c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d0:	f7fc ffb4 	bl	800113c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e045      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_OscConfig+0x470>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x444>
 80041ee:	e03d      	b.n	800426c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e038      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x4ec>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d028      	beq.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d121      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d11a      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800423e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004240:	4293      	cmp	r3, r2
 8004242:	d111      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	3b01      	subs	r3, #1
 8004252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0cc      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d90c      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a58      	ldr	r2, [pc, #352]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d044      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d119      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e067      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b37      	ldr	r3, [pc, #220]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4934      	ldr	r1, [pc, #208]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fc fee6 	bl	800113c <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fc fee2 	bl	800113c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e04f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d20c      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f821 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	490a      	ldr	r1, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fe46 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00
 8004438:	40023800 	.word	0x40023800
 800443c:	08009cfc 	.word	0x08009cfc
 8004440:	20000000 	.word	0x20000000
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b090      	sub	sp, #64	; 0x40
 800444e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
 8004454:	2300      	movs	r3, #0
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004458:	2300      	movs	r3, #0
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004460:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b08      	cmp	r3, #8
 800446a:	d00d      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x40>
 800446c:	2b08      	cmp	r3, #8
 800446e:	f200 80a1 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
 8004476:	2b04      	cmp	r3, #4
 8004478:	d003      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x3a>
 800447a:	e09b      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_GetSysClockFreq+0x184>)
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004480:	e09b      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004482:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004484:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004486:	e098      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004488:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004492:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	2200      	movs	r2, #0
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	627a      	str	r2, [r7, #36]	; 0x24
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044b0:	2100      	movs	r1, #0
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b4:	fb03 f201 	mul.w	r2, r3, r1
 80044b8:	2300      	movs	r3, #0
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	4413      	add	r3, r2
 80044c0:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c2:	fba0 1202 	umull	r1, r2, r0, r2
 80044c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c8:	460a      	mov	r2, r1
 80044ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ce:	4413      	add	r3, r2
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	2200      	movs	r2, #0
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	61fa      	str	r2, [r7, #28]
 80044da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044e2:	f7fb fecd 	bl	8000280 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4613      	mov	r3, r2
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ee:	e053      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	2200      	movs	r2, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	617a      	str	r2, [r7, #20]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004502:	f04f 0b00 	mov.w	fp, #0
 8004506:	4652      	mov	r2, sl
 8004508:	465b      	mov	r3, fp
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	0159      	lsls	r1, r3, #5
 8004514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004518:	0150      	lsls	r0, r2, #5
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	ebb2 080a 	subs.w	r8, r2, sl
 8004522:	eb63 090b 	sbc.w	r9, r3, fp
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800453a:	ebb2 0408 	subs.w	r4, r2, r8
 800453e:	eb63 0509 	sbc.w	r5, r3, r9
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	00eb      	lsls	r3, r5, #3
 800454c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004550:	00e2      	lsls	r2, r4, #3
 8004552:	4614      	mov	r4, r2
 8004554:	461d      	mov	r5, r3
 8004556:	eb14 030a 	adds.w	r3, r4, sl
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	eb45 030b 	adc.w	r3, r5, fp
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456e:	4629      	mov	r1, r5
 8004570:	028b      	lsls	r3, r1, #10
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004578:	4621      	mov	r1, r4
 800457a:	028a      	lsls	r2, r1, #10
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	2200      	movs	r2, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800458c:	f7fb fe78 	bl	8000280 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetSysClockFreq+0x184>)
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3740      	adds	r7, #64	; 0x40
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	017d7840 	.word	0x017d7840

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000000 	.word	0x20000000

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff0 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	08009d0c 	.word	0x08009d0c

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffdc 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0b5b      	lsrs	r3, r3, #13
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	08009d0c 	.word	0x08009d0c

0800463c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07b      	b.n	8004746 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d108      	bne.n	8004668 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d009      	beq.n	8004674 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
 8004666:	e005      	b.n	8004674 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fb4e 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	ea42 0103 	orr.w	r1, r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	f003 0104 	and.w	r1, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0210 	and.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004734:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e041      	b.n	80047e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fc fb23 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 f82d 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a40      	ldr	r2, [pc, #256]	; (8004900 <TIM_Base_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d00f      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3d      	ldr	r2, [pc, #244]	; (8004904 <TIM_Base_SetConfig+0x118>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3c      	ldr	r2, [pc, #240]	; (8004908 <TIM_Base_SetConfig+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3b      	ldr	r2, [pc, #236]	; (800490c <TIM_Base_SetConfig+0x120>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <TIM_Base_SetConfig+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <TIM_Base_SetConfig+0x114>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d02b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d027      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <TIM_Base_SetConfig+0x118>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d023      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <TIM_Base_SetConfig+0x11c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2a      	ldr	r2, [pc, #168]	; (800490c <TIM_Base_SetConfig+0x120>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <TIM_Base_SetConfig+0x124>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d017      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a28      	ldr	r2, [pc, #160]	; (8004914 <TIM_Base_SetConfig+0x128>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a27      	ldr	r2, [pc, #156]	; (8004918 <TIM_Base_SetConfig+0x12c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a26      	ldr	r2, [pc, #152]	; (800491c <TIM_Base_SetConfig+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a25      	ldr	r2, [pc, #148]	; (8004920 <TIM_Base_SetConfig+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <TIM_Base_SetConfig+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <TIM_Base_SetConfig+0x13c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0xf8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <TIM_Base_SetConfig+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	615a      	str	r2, [r3, #20]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40010400 	.word	0x40010400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800
 8004920:	40001800 	.word	0x40001800
 8004924:	40001c00 	.word	0x40001c00
 8004928:	40002000 	.word	0x40002000

0800492c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004940:	2302      	movs	r3, #2
 8004942:	e05a      	b.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d01d      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10c      	bne.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40010400 	.word	0x40010400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40001800 	.word	0x40001800

08004a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e03f      	b.n	8004ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f9da 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f929 	bl	8004cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b08a      	sub	sp, #40	; 0x28
 8004ac2:	af02      	add	r7, sp, #8
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d17c      	bne.n	8004bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_Transmit+0x2c>
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e075      	b.n	8004bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Transmit+0x3e>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e06e      	b.n	8004bda <HAL_UART_Transmit+0x11c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2221      	movs	r2, #33	; 0x21
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b12:	f7fc fb13 	bl	800113c <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	d108      	bne.n	8004b40 <HAL_UART_Transmit+0x82>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e003      	b.n	8004b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b50:	e02a      	b.n	8004ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f840 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e036      	b.n	8004bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	3302      	adds	r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e007      	b.n	8004b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3301      	adds	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1cf      	bne.n	8004b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2140      	movs	r1, #64	; 0x40
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f810 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b090      	sub	sp, #64	; 0x40
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf2:	e050      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfa:	d04c      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c02:	f7fc fa9b 	bl	800113c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d241      	bcs.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c32:	637a      	str	r2, [r7, #52]	; 0x34
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c66:	623a      	str	r2, [r7, #32]
 8004c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e00f      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d09f      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3740      	adds	r7, #64	; 0x40
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b0c0      	sub	sp, #256	; 0x100
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	68d9      	ldr	r1, [r3, #12]
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	ea40 0301 	orr.w	r3, r0, r1
 8004ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d18:	f021 010c 	bic.w	r1, r1, #12
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d26:	430b      	orrs	r3, r1
 8004d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	6999      	ldr	r1, [r3, #24]
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	ea40 0301 	orr.w	r3, r0, r1
 8004d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b8f      	ldr	r3, [pc, #572]	; (8004f8c <UART_SetConfig+0x2cc>)
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d005      	beq.n	8004d60 <UART_SetConfig+0xa0>
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8d      	ldr	r3, [pc, #564]	; (8004f90 <UART_SetConfig+0x2d0>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d104      	bne.n	8004d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7ff fc58 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8004d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d68:	e003      	b.n	8004d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d6a:	f7ff fc3f 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	f040 810c 	bne.w	8004f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	1891      	adds	r1, r2, r2
 8004d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d9a:	415b      	adcs	r3, r3
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004da2:	4621      	mov	r1, r4
 8004da4:	eb12 0801 	adds.w	r8, r2, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	eb43 0901 	adc.w	r9, r3, r1
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dc2:	4690      	mov	r8, r2
 8004dc4:	4699      	mov	r9, r3
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	eb18 0303 	adds.w	r3, r8, r3
 8004dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	eb49 0303 	adc.w	r3, r9, r3
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dee:	460b      	mov	r3, r1
 8004df0:	18db      	adds	r3, r3, r3
 8004df2:	653b      	str	r3, [r7, #80]	; 0x50
 8004df4:	4613      	mov	r3, r2
 8004df6:	eb42 0303 	adc.w	r3, r2, r3
 8004dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e04:	f7fb fa3c 	bl	8000280 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	011c      	lsls	r4, r3, #4
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e30:	415b      	adcs	r3, r3
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e38:	4641      	mov	r1, r8
 8004e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e3e:	4649      	mov	r1, r9
 8004e40:	eb43 0b01 	adc.w	fp, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e58:	4692      	mov	sl, r2
 8004e5a:	469b      	mov	fp, r3
 8004e5c:	4643      	mov	r3, r8
 8004e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e66:	464b      	mov	r3, r9
 8004e68:	eb4b 0303 	adc.w	r3, fp, r3
 8004e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e84:	460b      	mov	r3, r1
 8004e86:	18db      	adds	r3, r3, r3
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	647b      	str	r3, [r7, #68]	; 0x44
 8004e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e9a:	f7fb f9f1 	bl	8000280 <__aeabi_uldivmod>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2264      	movs	r2, #100	; 0x64
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	1acb      	subs	r3, r1, r3
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eba:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec8:	441c      	add	r4, r3
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eec:	4641      	mov	r1, r8
 8004eee:	1851      	adds	r1, r2, r1
 8004ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	414b      	adcs	r3, r1
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f04:	4659      	mov	r1, fp
 8004f06:	00cb      	lsls	r3, r1, #3
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0e:	4651      	mov	r1, sl
 8004f10:	00ca      	lsls	r2, r1, #3
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f20:	464b      	mov	r3, r9
 8004f22:	460a      	mov	r2, r1
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f40:	460b      	mov	r3, r1
 8004f42:	18db      	adds	r3, r3, r3
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f46:	4613      	mov	r3, r2
 8004f48:	eb42 0303 	adc.w	r3, r2, r3
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f56:	f7fb f993 	bl	8000280 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004f60:	fba3 1302 	umull	r1, r3, r3, r2
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	2164      	movs	r1, #100	; 0x64
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	3332      	adds	r3, #50	; 0x32
 8004f72:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <UART_SetConfig+0x2d4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	f003 0207 	and.w	r2, r3, #7
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4422      	add	r2, r4
 8004f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f88:	e106      	b.n	8005198 <UART_SetConfig+0x4d8>
 8004f8a:	bf00      	nop
 8004f8c:	40011000 	.word	0x40011000
 8004f90:	40011400 	.word	0x40011400
 8004f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004faa:	4642      	mov	r2, r8
 8004fac:	464b      	mov	r3, r9
 8004fae:	1891      	adds	r1, r2, r2
 8004fb0:	6239      	str	r1, [r7, #32]
 8004fb2:	415b      	adcs	r3, r3
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fba:	4641      	mov	r1, r8
 8004fbc:	1854      	adds	r4, r2, r1
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	eb43 0501 	adc.w	r5, r3, r1
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	00eb      	lsls	r3, r5, #3
 8004fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd2:	00e2      	lsls	r2, r4, #3
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	4643      	mov	r3, r8
 8004fda:	18e3      	adds	r3, r4, r3
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	eb45 0303 	adc.w	r3, r5, r3
 8004fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005006:	4629      	mov	r1, r5
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	4621      	mov	r1, r4
 800500c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005010:	4621      	mov	r1, r4
 8005012:	008a      	lsls	r2, r1, #2
 8005014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005018:	f7fb f932 	bl	8000280 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b60      	ldr	r3, [pc, #384]	; (80051a4 <UART_SetConfig+0x4e4>)
 8005022:	fba3 2302 	umull	r2, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	011c      	lsls	r4, r3, #4
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	1891      	adds	r1, r2, r2
 8005042:	61b9      	str	r1, [r7, #24]
 8005044:	415b      	adcs	r3, r3
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800504c:	4641      	mov	r1, r8
 800504e:	1851      	adds	r1, r2, r1
 8005050:	6139      	str	r1, [r7, #16]
 8005052:	4649      	mov	r1, r9
 8005054:	414b      	adcs	r3, r1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005064:	4659      	mov	r1, fp
 8005066:	00cb      	lsls	r3, r1, #3
 8005068:	4651      	mov	r1, sl
 800506a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506e:	4651      	mov	r1, sl
 8005070:	00ca      	lsls	r2, r1, #3
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	4603      	mov	r3, r0
 8005078:	4642      	mov	r2, r8
 800507a:	189b      	adds	r3, r3, r2
 800507c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005080:	464b      	mov	r3, r9
 8005082:	460a      	mov	r2, r1
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	67bb      	str	r3, [r7, #120]	; 0x78
 8005096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050a4:	4649      	mov	r1, r9
 80050a6:	008b      	lsls	r3, r1, #2
 80050a8:	4641      	mov	r1, r8
 80050aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ae:	4641      	mov	r1, r8
 80050b0:	008a      	lsls	r2, r1, #2
 80050b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050b6:	f7fb f8e3 	bl	8000280 <__aeabi_uldivmod>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	4b38      	ldr	r3, [pc, #224]	; (80051a4 <UART_SetConfig+0x4e4>)
 80050c2:	fba3 2301 	umull	r2, r3, r3, r1
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	2264      	movs	r2, #100	; 0x64
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	1acb      	subs	r3, r1, r3
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	3332      	adds	r3, #50	; 0x32
 80050d4:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <UART_SetConfig+0x4e4>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e0:	441c      	add	r4, r3
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e6:	2200      	movs	r2, #0
 80050e8:	673b      	str	r3, [r7, #112]	; 0x70
 80050ea:	677a      	str	r2, [r7, #116]	; 0x74
 80050ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	1891      	adds	r1, r2, r2
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	415b      	adcs	r3, r3
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005100:	4641      	mov	r1, r8
 8005102:	1851      	adds	r1, r2, r1
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	4649      	mov	r1, r9
 8005108:	414b      	adcs	r3, r1
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005118:	4659      	mov	r1, fp
 800511a:	00cb      	lsls	r3, r1, #3
 800511c:	4651      	mov	r1, sl
 800511e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005122:	4651      	mov	r1, sl
 8005124:	00ca      	lsls	r2, r1, #3
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	4603      	mov	r3, r0
 800512c:	4642      	mov	r2, r8
 800512e:	189b      	adds	r3, r3, r2
 8005130:	66bb      	str	r3, [r7, #104]	; 0x68
 8005132:	464b      	mov	r3, r9
 8005134:	460a      	mov	r2, r1
 8005136:	eb42 0303 	adc.w	r3, r2, r3
 800513a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	663b      	str	r3, [r7, #96]	; 0x60
 8005146:	667a      	str	r2, [r7, #100]	; 0x64
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005154:	4649      	mov	r1, r9
 8005156:	008b      	lsls	r3, r1, #2
 8005158:	4641      	mov	r1, r8
 800515a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515e:	4641      	mov	r1, r8
 8005160:	008a      	lsls	r2, r1, #2
 8005162:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005166:	f7fb f88b 	bl	8000280 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <UART_SetConfig+0x4e4>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <UART_SetConfig+0x4e4>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4422      	add	r2, r4
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800519e:	46bd      	mov	sp, r7
 80051a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a4:	51eb851f 	.word	0x51eb851f

080051a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a8:	b084      	sub	sp, #16
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	f107 001c 	add.w	r0, r7, #28
 80051b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d122      	bne.n	8005206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 fbee 	bl	80069dc <USB_CoreReset>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]
 8005204:	e01a      	b.n	800523c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fbe2 	bl	80069dc <USB_CoreReset>
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
 800522e:	e005      	b.n	800523c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10b      	bne.n	800525a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f043 0206 	orr.w	r2, r3, #6
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005266:	b004      	add	sp, #16
 8005268:	4770      	bx	lr
	...

0800526c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d165      	bne.n	800534c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a41      	ldr	r2, [pc, #260]	; (8005388 <USB_SetTurnaroundTime+0x11c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d906      	bls.n	8005296 <USB_SetTurnaroundTime+0x2a>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a40      	ldr	r2, [pc, #256]	; (800538c <USB_SetTurnaroundTime+0x120>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d202      	bcs.n	8005296 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005290:	230f      	movs	r3, #15
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e062      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a3c      	ldr	r2, [pc, #240]	; (800538c <USB_SetTurnaroundTime+0x120>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d306      	bcc.n	80052ac <USB_SetTurnaroundTime+0x40>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a3b      	ldr	r2, [pc, #236]	; (8005390 <USB_SetTurnaroundTime+0x124>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d202      	bcs.n	80052ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052a6:	230e      	movs	r3, #14
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e057      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a38      	ldr	r2, [pc, #224]	; (8005390 <USB_SetTurnaroundTime+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d306      	bcc.n	80052c2 <USB_SetTurnaroundTime+0x56>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a37      	ldr	r2, [pc, #220]	; (8005394 <USB_SetTurnaroundTime+0x128>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d202      	bcs.n	80052c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052bc:	230d      	movs	r3, #13
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e04c      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a33      	ldr	r2, [pc, #204]	; (8005394 <USB_SetTurnaroundTime+0x128>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d306      	bcc.n	80052d8 <USB_SetTurnaroundTime+0x6c>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a32      	ldr	r2, [pc, #200]	; (8005398 <USB_SetTurnaroundTime+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d802      	bhi.n	80052d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052d2:	230c      	movs	r3, #12
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e041      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <USB_SetTurnaroundTime+0x12c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d906      	bls.n	80052ee <USB_SetTurnaroundTime+0x82>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a2e      	ldr	r2, [pc, #184]	; (800539c <USB_SetTurnaroundTime+0x130>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d802      	bhi.n	80052ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052e8:	230b      	movs	r3, #11
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e036      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <USB_SetTurnaroundTime+0x130>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d906      	bls.n	8005304 <USB_SetTurnaroundTime+0x98>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <USB_SetTurnaroundTime+0x134>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d802      	bhi.n	8005304 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052fe:	230a      	movs	r3, #10
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e02b      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <USB_SetTurnaroundTime+0x134>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d906      	bls.n	800531a <USB_SetTurnaroundTime+0xae>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <USB_SetTurnaroundTime+0x138>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d202      	bcs.n	800531a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005314:	2309      	movs	r3, #9
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e020      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <USB_SetTurnaroundTime+0x138>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d306      	bcc.n	8005330 <USB_SetTurnaroundTime+0xc4>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <USB_SetTurnaroundTime+0x13c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d802      	bhi.n	8005330 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800532a:	2308      	movs	r3, #8
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e015      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <USB_SetTurnaroundTime+0x13c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d906      	bls.n	8005346 <USB_SetTurnaroundTime+0xda>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <USB_SetTurnaroundTime+0x140>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d202      	bcs.n	8005346 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005340:	2307      	movs	r3, #7
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e00a      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005346:	2306      	movs	r3, #6
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e007      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005352:	2309      	movs	r3, #9
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e001      	b.n	800535c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005358:	2309      	movs	r3, #9
 800535a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	00d8acbf 	.word	0x00d8acbf
 800538c:	00e4e1c0 	.word	0x00e4e1c0
 8005390:	00f42400 	.word	0x00f42400
 8005394:	01067380 	.word	0x01067380
 8005398:	011a499f 	.word	0x011a499f
 800539c:	01312cff 	.word	0x01312cff
 80053a0:	014ca43f 	.word	0x014ca43f
 80053a4:	016e3600 	.word	0x016e3600
 80053a8:	01a6ab1f 	.word	0x01a6ab1f
 80053ac:	01e84800 	.word	0x01e84800

080053b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d115      	bne.n	8005442 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005422:	2001      	movs	r0, #1
 8005424:	f7fb fe96 	bl	8001154 <HAL_Delay>
      ms++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fa45 	bl	80068be <USB_GetMode>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d01e      	beq.n	8005478 <USB_SetCurrentMode+0x84>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b31      	cmp	r3, #49	; 0x31
 800543e:	d9f0      	bls.n	8005422 <USB_SetCurrentMode+0x2e>
 8005440:	e01a      	b.n	8005478 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d115      	bne.n	8005474 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005454:	2001      	movs	r0, #1
 8005456:	f7fb fe7d 	bl	8001154 <HAL_Delay>
      ms++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 fa2c 	bl	80068be <USB_GetMode>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <USB_SetCurrentMode+0x84>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b31      	cmp	r3, #49	; 0x31
 8005470:	d9f0      	bls.n	8005454 <USB_SetCurrentMode+0x60>
 8005472:	e001      	b.n	8005478 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e005      	b.n	8005484 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b32      	cmp	r3, #50	; 0x32
 800547c:	d101      	bne.n	8005482 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800548c:	b084      	sub	sp, #16
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e009      	b.n	80054c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3340      	adds	r3, #64	; 0x40
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0e      	cmp	r3, #14
 80054c4:	d9f2      	bls.n	80054ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11c      	bne.n	8005506 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	639a      	str	r2, [r3, #56]	; 0x38
 8005504:	e00b      	b.n	800551e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	4619      	mov	r1, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	461a      	mov	r2, r3
 800553a:	680b      	ldr	r3, [r1, #0]
 800553c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	2b01      	cmp	r3, #1
 8005542:	d10c      	bne.n	800555e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f965 	bl	800581c <USB_SetDevSpeed>
 8005552:	e008      	b.n	8005566 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005554:	2101      	movs	r1, #1
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f960 	bl	800581c <USB_SetDevSpeed>
 800555c:	e003      	b.n	8005566 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800555e:	2103      	movs	r1, #3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f95b 	bl	800581c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005566:	2110      	movs	r1, #16
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8f3 	bl	8005754 <USB_FlushTxFifo>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f91f 	bl	80057bc <USB_FlushRxFifo>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	461a      	mov	r2, r3
 800559c:	2300      	movs	r3, #0
 800559e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e043      	b.n	800563a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c8:	d118      	bne.n	80055fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	461a      	mov	r2, r3
 80055de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e013      	b.n	800560e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	461a      	mov	r2, r3
 80055f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e008      	b.n	800560e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3301      	adds	r3, #1
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d3b7      	bcc.n	80055b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e043      	b.n	80056d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565e:	d118      	bne.n	8005692 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	461a      	mov	r2, r3
 8005674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e013      	b.n	80056a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	461a      	mov	r2, r3
 800568a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e008      	b.n	80056a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	461a      	mov	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d3b7      	bcc.n	8005648 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f043 0210 	orr.w	r2, r3, #16
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <USB_DevInit+0x2c4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f043 0208 	orr.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005740:	7dfb      	ldrb	r3, [r7, #23]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574c:	b004      	add	sp, #16
 800574e:	4770      	bx	lr
 8005750:	803c3800 	.word	0x803c3800

08005754 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <USB_FlushTxFifo+0x64>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e01b      	b.n	80057ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	daf2      	bge.n	8005762 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	019b      	lsls	r3, r3, #6
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <USB_FlushTxFifo+0x64>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e006      	b.n	80057ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d0f0      	beq.n	800578c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	00030d40 	.word	0x00030d40

080057bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a11      	ldr	r2, [pc, #68]	; (8005818 <USB_FlushRxFifo+0x5c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e018      	b.n	800580c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	daf2      	bge.n	80057c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2210      	movs	r2, #16
 80057ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a08      	ldr	r2, [pc, #32]	; (8005818 <USB_FlushRxFifo+0x5c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e006      	b.n	800580c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b10      	cmp	r3, #16
 8005808:	d0f0      	beq.n	80057ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	00030d40 	.word	0x00030d40

0800581c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0306 	and.w	r3, r3, #6
 8005866:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
 8005872:	e00a      	b.n	800588a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d002      	beq.n	8005880 <USB_GetDevSpeed+0x32>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b06      	cmp	r3, #6
 800587e:	d102      	bne.n	8005886 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005880:	2302      	movs	r3, #2
 8005882:	75fb      	strb	r3, [r7, #23]
 8005884:	e001      	b.n	800588a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005886:	230f      	movs	r3, #15
 8005888:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d13a      	bne.n	800592a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d155      	bne.n	8005998 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	791b      	ldrb	r3, [r3, #4]
 8005906:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005908:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	059b      	lsls	r3, r3, #22
 800590e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005910:	4313      	orrs	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e036      	b.n	8005998 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	2101      	movs	r1, #1
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4313      	orrs	r3, r2
 800594a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11a      	bne.n	8005998 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	791b      	ldrb	r3, [r3, #4]
 800597c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800597e:	430b      	orrs	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005996:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d161      	bne.n	8005a88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059da:	d11f      	bne.n	8005a1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a60:	4013      	ands	r3, r2
 8005a62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	0159      	lsls	r1, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	440b      	add	r3, r1
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <USB_DeactivateEndpoint+0x1b0>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]
 8005a86:	e060      	b.n	8005b4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9e:	d11f      	bne.n	8005ae0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005abe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	43db      	mvns	r3, r3
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b00:	4013      	ands	r3, r2
 8005b02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b24:	4013      	ands	r3, r2
 8005b26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	0159      	lsls	r1, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	4619      	mov	r1, r3
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <USB_DeactivateEndpoint+0x1b4>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	ec337800 	.word	0xec337800
 8005b5c:	eff37800 	.word	0xeff37800

08005b60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 815c 	bne.w	8005e3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d132      	bne.n	8005bf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	0cdb      	lsrs	r3, r3, #19
 8005bea:	04db      	lsls	r3, r3, #19
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	e074      	b.n	8005cda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	0cdb      	lsrs	r3, r3, #19
 8005c0c:	04db      	lsls	r3, r3, #19
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6999      	ldr	r1, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	440b      	add	r3, r1
 8005c4c:	1e59      	subs	r1, r3, #1
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c58:	4b9d      	ldr	r3, [pc, #628]	; (8005ed0 <USB_EPStartXfer+0x370>)
 8005c5a:	400b      	ands	r3, r1
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	0148      	lsls	r0, r1, #5
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	4401      	add	r1, r0
 8005c64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	69b9      	ldr	r1, [r7, #24]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	69f9      	ldr	r1, [r7, #28]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d11f      	bne.n	8005cda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d14b      	bne.n	8005d78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	791b      	ldrb	r3, [r3, #4]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d128      	bne.n	8005d56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d110      	bne.n	8005d36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e00f      	b.n	8005d56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e133      	b.n	8005fe0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d015      	beq.n	8005dcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 811b 	beq.w	8005fe0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	634b      	str	r3, [r1, #52]	; 0x34
 8005dca:	e109      	b.n	8005fe0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e00f      	b.n	8005e1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6919      	ldr	r1, [r3, #16]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	b298      	uxth	r0, r3
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fade 	bl	80063f4 <USB_WritePacket>
 8005e38:	e0d2      	b.n	8005fe0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e54:	0cdb      	lsrs	r3, r3, #19
 8005e56:	04db      	lsls	r3, r3, #19
 8005e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d126      	bne.n	8005ed4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	0148      	lsls	r0, r1, #5
 8005ea0:	69f9      	ldr	r1, [r7, #28]
 8005ea2:	4401      	add	r1, r0
 8005ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eca:	6113      	str	r3, [r2, #16]
 8005ecc:	e03a      	b.n	8005f44 <USB_EPStartXfer+0x3e4>
 8005ece:	bf00      	nop
 8005ed0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	1e5a      	subs	r2, r3, #1
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	8afa      	ldrh	r2, [r7, #22]
 8005ef0:	fb03 f202 	mul.w	r2, r3, r2
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	8afb      	ldrh	r3, [r7, #22]
 8005f08:	04d9      	lsls	r1, r3, #19
 8005f0a:	4b38      	ldr	r3, [pc, #224]	; (8005fec <USB_EPStartXfer+0x48c>)
 8005f0c:	400b      	ands	r3, r1
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	0148      	lsls	r0, r1, #5
 8005f12:	69f9      	ldr	r1, [r7, #28]
 8005f14:	4401      	add	r1, r0
 8005f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	0148      	lsls	r0, r1, #5
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f40:	4313      	orrs	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d10d      	bne.n	8005f66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6919      	ldr	r1, [r3, #16]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	460a      	mov	r2, r1
 8005f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d128      	bne.n	8005fc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d110      	bne.n	8005fa0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00f      	b.n	8005fc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	1ff80000 	.word	0x1ff80000

08005ff0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b01      	cmp	r3, #1
 800600e:	f040 80ce 	bne.w	80061ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d132      	bne.n	8006080 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800603c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800605c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006078:	0cdb      	lsrs	r3, r3, #19
 800607a:	04db      	lsls	r3, r3, #19
 800607c:	6113      	str	r3, [r2, #16]
 800607e:	e04e      	b.n	800611e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	0cdb      	lsrs	r3, r3, #19
 800609c:	04db      	lsls	r3, r3, #19
 800609e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d903      	bls.n	80060d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610e:	6939      	ldr	r1, [r7, #16]
 8006110:	0148      	lsls	r0, r1, #5
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	4401      	add	r1, r0
 8006116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800611a:	4313      	orrs	r3, r2
 800611c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d11e      	bne.n	8006162 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	e097      	b.n	8006292 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006180:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8083 	beq.w	8006292 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	2101      	movs	r1, #1
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	6979      	ldr	r1, [r7, #20]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a8:	4313      	orrs	r3, r2
 80061aa:	634b      	str	r3, [r1, #52]	; 0x34
 80061ac:	e071      	b.n	8006292 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c8:	0cdb      	lsrs	r3, r3, #19
 80061ca:	04db      	lsls	r3, r3, #19
 80061cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006240:	6939      	ldr	r1, [r7, #16]
 8006242:	0148      	lsls	r0, r1, #5
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	4401      	add	r1, r0
 8006248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800624c:	4313      	orrs	r3, r2
 800624e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d10d      	bne.n	8006272 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6919      	ldr	r1, [r3, #16]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	460a      	mov	r2, r1
 8006270:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006290:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d14a      	bne.n	8006354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d6:	f040 8086 	bne.w	80063e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	7812      	ldrb	r2, [r2, #0]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	440a      	add	r2, r1
 8006318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f242 7210 	movw	r2, #10000	; 0x2710
 800632e:	4293      	cmp	r3, r2
 8006330:	d902      	bls.n	8006338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
          break;
 8006336:	e056      	b.n	80063e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006350:	d0e7      	beq.n	8006322 <USB_EPStopXfer+0x82>
 8006352:	e048      	b.n	80063e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800636c:	d13b      	bne.n	80063e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f242 7210 	movw	r2, #10000	; 0x2710
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d902      	bls.n	80063cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ca:	e00c      	b.n	80063e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e4:	d0e7      	beq.n	80063b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	460b      	mov	r3, r1
 8006404:	71fb      	strb	r3, [r7, #7]
 8006406:	4613      	mov	r3, r2
 8006408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d123      	bne.n	8006462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	3303      	adds	r3, #3
 800641e:	089b      	lsrs	r3, r3, #2
 8006420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e018      	b.n	800645a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	031a      	lsls	r2, r3, #12
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006434:	461a      	mov	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	3301      	adds	r3, #1
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	d3e2      	bcc.n	8006428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3724      	adds	r7, #36	; 0x24
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006470:	b480      	push	{r7}
 8006472:	b08b      	sub	sp, #44	; 0x2c
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	089b      	lsrs	r3, r3, #2
 800648a:	b29b      	uxth	r3, r3
 800648c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	e014      	b.n	80064c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	3301      	adds	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	3301      	adds	r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	3301      	adds	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	3301      	adds	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	3301      	adds	r3, #1
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3e6      	bcc.n	800649c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01e      	beq.n	8006512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	461a      	mov	r2, r3
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	701a      	strb	r2, [r3, #0]
      i++;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	3301      	adds	r3, #1
 80064fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	3301      	adds	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006506:	8bfb      	ldrh	r3, [r7, #30]
 8006508:	3b01      	subs	r3, #1
 800650a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800650c:	8bfb      	ldrh	r3, [r7, #30]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ea      	bne.n	80064e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006514:	4618      	mov	r0, r3
 8006516:	372c      	adds	r7, #44	; 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d12c      	bne.n	8006596 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	db12      	blt.n	8006574 <USB_EPSetStall+0x54>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00f      	beq.n	8006574 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006572:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	e02b      	b.n	80065ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db12      	blt.n	80065ce <USB_EPSetStall+0xae>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00f      	beq.n	80065ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d128      	bne.n	800666a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006636:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d003      	beq.n	8006648 <USB_EPClearStall+0x4c>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	791b      	ldrb	r3, [r3, #4]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d138      	bne.n	80066ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	e027      	b.n	80066ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d003      	beq.n	800669a <USB_EPClearStall+0x9e>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	791b      	ldrb	r3, [r3, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d10f      	bne.n	80066ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006742:	f023 0302 	bic.w	r3, r3, #2
 8006746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006770:	f023 0303 	bic.w	r3, r3, #3
 8006774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006784:	f043 0302 	orr.w	r3, r3, #2
 8006788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4013      	ands	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067b0:	68fb      	ldr	r3, [r7, #12]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	0c1b      	lsrs	r3, r3, #16
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4013      	ands	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	b29b      	uxth	r3, r3
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4013      	ands	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006854:	68bb      	ldr	r3, [r7, #8]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006862:	b480      	push	{r7}
 8006864:	b087      	sub	sp, #28
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	fa22 f303 	lsr.w	r3, r2, r3
 8006892:	01db      	lsls	r3, r3, #7
 8006894:	b2db      	uxtb	r3, r3
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4013      	ands	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068b0:	68bb      	ldr	r3, [r7, #8]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0301 	and.w	r3, r3, #1
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068f8:	f023 0307 	bic.w	r3, r3, #7
 80068fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	460b      	mov	r3, r1
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	333c      	adds	r3, #60	; 0x3c
 8006936:	3304      	adds	r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <USB_EP0_OutStart+0xb8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d90a      	bls.n	800695a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d101      	bne.n	800695a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e037      	b.n	80069ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006988:	f043 0318 	orr.w	r3, r3, #24
 800698c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10f      	bne.n	80069c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	4f54300a 	.word	0x4f54300a

080069dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <USB_CoreReset+0x64>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e01b      	b.n	8006a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	daf2      	bge.n	80069e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <USB_CoreReset+0x64>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e006      	b.n	8006a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d0f0      	beq.n	8006a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a54:	f002 fc36 	bl	80092c4 <USBD_static_malloc>
 8006a58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32b0      	adds	r2, #176	; 0xb0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a70:	2302      	movs	r3, #2
 8006a72:	e0d4      	b.n	8006c1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a78:	2100      	movs	r1, #0
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f002 fc86 	bl	800938c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32b0      	adds	r2, #176	; 0xb0
 8006a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7c1b      	ldrb	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d138      	bne.n	8006b1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aac:	4b5e      	ldr	r3, [pc, #376]	; (8006c28 <USBD_CDC_Init+0x1e4>)
 8006aae:	7819      	ldrb	r1, [r3, #0]
 8006ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 fae1 	bl	800907e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006abc:	4b5a      	ldr	r3, [pc, #360]	; (8006c28 <USBD_CDC_Init+0x1e4>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3324      	adds	r3, #36	; 0x24
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ad6:	4b55      	ldr	r3, [pc, #340]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006ad8:	7819      	ldrb	r1, [r3, #0]
 8006ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ade:	2202      	movs	r2, #2
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 facc 	bl	800907e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ae6:	4b51      	ldr	r3, [pc, #324]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006afe:	2201      	movs	r2, #1
 8006b00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b02:	4b4b      	ldr	r3, [pc, #300]	; (8006c30 <USBD_CDC_Init+0x1ec>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3326      	adds	r3, #38	; 0x26
 8006b18:	2210      	movs	r2, #16
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e035      	b.n	8006b8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b1e:	4b42      	ldr	r3, [pc, #264]	; (8006c28 <USBD_CDC_Init+0x1e4>)
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	2202      	movs	r2, #2
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 faa9 	bl	800907e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <USBD_CDC_Init+0x1e4>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	3324      	adds	r3, #36	; 0x24
 8006b42:	2201      	movs	r2, #1
 8006b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b46:	4b39      	ldr	r3, [pc, #228]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006b48:	7819      	ldrb	r1, [r3, #0]
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 fa95 	bl	800907e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b54:	4b35      	ldr	r3, [pc, #212]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b70:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <USBD_CDC_Init+0x1ec>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3326      	adds	r3, #38	; 0x26
 8006b86:	2210      	movs	r2, #16
 8006b88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <USBD_CDC_Init+0x1ec>)
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	2308      	movs	r3, #8
 8006b90:	2203      	movs	r2, #3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fa73 	bl	800907e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <USBD_CDC_Init+0x1ec>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	2201      	movs	r2, #1
 8006bb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	33b0      	adds	r3, #176	; 0xb0
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006be8:	2302      	movs	r3, #2
 8006bea:	e018      	b.n	8006c1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1b      	ldrb	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006bf6:	7819      	ldrb	r1, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f002 fb2a 	bl	800925c <USBD_LL_PrepareReceive>
 8006c08:	e008      	b.n	8006c1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <USBD_CDC_Init+0x1e8>)
 8006c0c:	7819      	ldrb	r1, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f002 fb20 	bl	800925c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000093 	.word	0x20000093
 8006c2c:	20000094 	.word	0x20000094
 8006c30:	20000095 	.word	0x20000095

08006c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c40:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <USBD_CDC_DeInit+0xf8>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f002 fa3f 	bl	80090ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c4c:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <USBD_CDC_DeInit+0xf8>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 020f 	and.w	r2, r3, #15
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3324      	adds	r3, #36	; 0x24
 8006c62:	2200      	movs	r2, #0
 8006c64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <USBD_CDC_DeInit+0xfc>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 fa2c 	bl	80090ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c72:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <USBD_CDC_DeInit+0xfc>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c8e:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <USBD_CDC_DeInit+0x100>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f002 fa18 	bl	80090ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c9a:	4b26      	ldr	r3, [pc, #152]	; (8006d34 <USBD_CDC_DeInit+0x100>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 020f 	and.w	r2, r3, #15
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <USBD_CDC_DeInit+0x100>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 020f 	and.w	r2, r3, #15
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3326      	adds	r3, #38	; 0x26
 8006cca:	2200      	movs	r2, #0
 8006ccc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	32b0      	adds	r2, #176	; 0xb0
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01f      	beq.n	8006d20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	33b0      	adds	r3, #176	; 0xb0
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	32b0      	adds	r2, #176	; 0xb0
 8006cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f002 faec 	bl	80092e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	32b0      	adds	r2, #176	; 0xb0
 8006d12:	2100      	movs	r1, #0
 8006d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000093 	.word	0x20000093
 8006d30:	20000094 	.word	0x20000094
 8006d34:	20000095 	.word	0x20000095

08006d38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	32b0      	adds	r2, #176	; 0xb0
 8006d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e0bf      	b.n	8006ee8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d050      	beq.n	8006e16 <USBD_CDC_Setup+0xde>
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	f040 80af 	bne.w	8006ed8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	88db      	ldrh	r3, [r3, #6]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d03a      	beq.n	8006df8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b25b      	sxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da1b      	bge.n	8006dc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	33b0      	adds	r3, #176	; 0xb0
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006da2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	88d2      	ldrh	r2, [r2, #6]
 8006da8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b07      	cmp	r3, #7
 8006db0:	bf28      	it	cs
 8006db2:	2307      	movcs	r3, #7
 8006db4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	89fa      	ldrh	r2, [r7, #14]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fd43 	bl	8008848 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dc2:	e090      	b.n	8006ee6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	785a      	ldrb	r2, [r3, #1]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8006dd4:	d803      	bhi.n	8006dde <USBD_CDC_Setup+0xa6>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	88db      	ldrh	r3, [r3, #6]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	e000      	b.n	8006de0 <USBD_CDC_Setup+0xa8>
 8006dde:	2240      	movs	r2, #64	; 0x40
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006de6:	6939      	ldr	r1, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dee:	461a      	mov	r2, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fd55 	bl	80088a0 <USBD_CtlPrepareRx>
      break;
 8006df6:	e076      	b.n	8006ee6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	33b0      	adds	r3, #176	; 0xb0
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	7850      	ldrb	r0, [r2, #1]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	4798      	blx	r3
      break;
 8006e14:	e067      	b.n	8006ee6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b0b      	cmp	r3, #11
 8006e1c:	d851      	bhi.n	8006ec2 <USBD_CDC_Setup+0x18a>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_CDC_Setup+0xec>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e55 	.word	0x08006e55
 8006e28:	08006ed1 	.word	0x08006ed1
 8006e2c:	08006ec3 	.word	0x08006ec3
 8006e30:	08006ec3 	.word	0x08006ec3
 8006e34:	08006ec3 	.word	0x08006ec3
 8006e38:	08006ec3 	.word	0x08006ec3
 8006e3c:	08006ec3 	.word	0x08006ec3
 8006e40:	08006ec3 	.word	0x08006ec3
 8006e44:	08006ec3 	.word	0x08006ec3
 8006e48:	08006ec3 	.word	0x08006ec3
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006ea9 	.word	0x08006ea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d107      	bne.n	8006e70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e60:	f107 030a 	add.w	r3, r7, #10
 8006e64:	2202      	movs	r2, #2
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fced 	bl	8008848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e6e:	e032      	b.n	8006ed6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fc77 	bl	8008766 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7c:	e02b      	b.n	8006ed6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d107      	bne.n	8006e9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e8a:	f107 030d 	add.w	r3, r7, #13
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fcd8 	bl	8008848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e98:	e01d      	b.n	8006ed6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fc62 	bl	8008766 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea6:	e016      	b.n	8006ed6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d00f      	beq.n	8006ed4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fc55 	bl	8008766 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ec0:	e008      	b.n	8006ed4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fc4e 	bl	8008766 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ece:	e002      	b.n	8006ed6 <USBD_CDC_Setup+0x19e>
          break;
 8006ed0:	bf00      	nop
 8006ed2:	e008      	b.n	8006ee6 <USBD_CDC_Setup+0x1ae>
          break;
 8006ed4:	bf00      	nop
      }
      break;
 8006ed6:	e006      	b.n	8006ee6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fc43 	bl	8008766 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32b0      	adds	r2, #176	; 0xb0
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e065      	b.n	8006fe6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	32b0      	adds	r2, #176	; 0xb0
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d02f      	beq.n	8006fa4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	f003 020f 	and.w	r2, r3, #15
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	3318      	adds	r3, #24
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 010f 	and.w	r1, r3, #15
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	460b      	mov	r3, r1
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	440b      	add	r3, r1
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4403      	add	r3, r0
 8006f6c:	3348      	adds	r3, #72	; 0x48
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d112      	bne.n	8006fa4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3318      	adds	r3, #24
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f96:	78f9      	ldrb	r1, [r7, #3]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f002 f93c 	bl	800921a <USBD_LL_Transmit>
 8006fa2:	e01f      	b.n	8006fe4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	33b0      	adds	r3, #176	; 0xb0
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d010      	beq.n	8006fe4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	33b0      	adds	r3, #176	; 0xb0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	32b0      	adds	r2, #176	; 0xb0
 8007004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007008:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32b0      	adds	r2, #176	; 0xb0
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e01a      	b.n	8007056 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 f93a 	bl	800929e <USBD_LL_GetRxDataSize>
 800702a:	4602      	mov	r2, r0
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	33b0      	adds	r3, #176	; 0xb0
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007050:	4611      	mov	r1, r2
 8007052:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32b0      	adds	r2, #176	; 0xb0
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e025      	b.n	80070cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	33b0      	adds	r3, #176	; 0xb0
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01a      	beq.n	80070ca <USBD_CDC_EP0_RxReady+0x6c>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800709a:	2bff      	cmp	r3, #255	; 0xff
 800709c:	d015      	beq.n	80070ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	33b0      	adds	r3, #176	; 0xb0
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070be:	b292      	uxth	r2, r2
 80070c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070dc:	2182      	movs	r1, #130	; 0x82
 80070de:	4818      	ldr	r0, [pc, #96]	; (8007140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070e0:	f000 fd09 	bl	8007af6 <USBD_GetEpDesc>
 80070e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070e6:	2101      	movs	r1, #1
 80070e8:	4815      	ldr	r0, [pc, #84]	; (8007140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070ea:	f000 fd04 	bl	8007af6 <USBD_GetEpDesc>
 80070ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070f0:	2181      	movs	r1, #129	; 0x81
 80070f2:	4813      	ldr	r0, [pc, #76]	; (8007140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070f4:	f000 fcff 	bl	8007af6 <USBD_GetEpDesc>
 80070f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2210      	movs	r2, #16
 8007104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d006      	beq.n	800711a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2200      	movs	r2, #0
 8007110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007114:	711a      	strb	r2, [r3, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007128:	711a      	strb	r2, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2243      	movs	r2, #67	; 0x43
 8007132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000050 	.word	0x20000050

08007144 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800714c:	2182      	movs	r1, #130	; 0x82
 800714e:	4818      	ldr	r0, [pc, #96]	; (80071b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007150:	f000 fcd1 	bl	8007af6 <USBD_GetEpDesc>
 8007154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007156:	2101      	movs	r1, #1
 8007158:	4815      	ldr	r0, [pc, #84]	; (80071b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800715a:	f000 fccc 	bl	8007af6 <USBD_GetEpDesc>
 800715e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007160:	2181      	movs	r1, #129	; 0x81
 8007162:	4813      	ldr	r0, [pc, #76]	; (80071b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007164:	f000 fcc7 	bl	8007af6 <USBD_GetEpDesc>
 8007168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2210      	movs	r2, #16
 8007174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2200      	movs	r2, #0
 8007180:	711a      	strb	r2, [r3, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f042 0202 	orr.w	r2, r2, #2
 8007188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	711a      	strb	r2, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f042 0202 	orr.w	r2, r2, #2
 800719c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2243      	movs	r2, #67	; 0x43
 80071a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071a4:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000050 	.word	0x20000050

080071b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071bc:	2182      	movs	r1, #130	; 0x82
 80071be:	4818      	ldr	r0, [pc, #96]	; (8007220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071c0:	f000 fc99 	bl	8007af6 <USBD_GetEpDesc>
 80071c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071c6:	2101      	movs	r1, #1
 80071c8:	4815      	ldr	r0, [pc, #84]	; (8007220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071ca:	f000 fc94 	bl	8007af6 <USBD_GetEpDesc>
 80071ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071d0:	2181      	movs	r1, #129	; 0x81
 80071d2:	4813      	ldr	r0, [pc, #76]	; (8007220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071d4:	f000 fc8f 	bl	8007af6 <USBD_GetEpDesc>
 80071d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2210      	movs	r2, #16
 80071e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f4:	711a      	strb	r2, [r3, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d006      	beq.n	800720e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007208:	711a      	strb	r2, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2243      	movs	r2, #67	; 0x43
 8007212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000050 	.word	0x20000050

08007224 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220a      	movs	r2, #10
 8007230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	2000000c 	.word	0x2000000c

08007244 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007254:	2303      	movs	r3, #3
 8007256:	e009      	b.n	800726c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	33b0      	adds	r3, #176	; 0xb0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	32b0      	adds	r2, #176	; 0xb0
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	e008      	b.n	80072b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	32b0      	adds	r2, #176	; 0xb0
 80072d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	e004      	b.n	80072ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
	...

080072f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32b0      	adds	r2, #176	; 0xb0
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32b0      	adds	r2, #176	; 0xb0
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	e018      	b.n	8007358 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7c1b      	ldrb	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <USBD_CDC_ReceivePacket+0x68>)
 8007330:	7819      	ldrb	r1, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 ff8d 	bl	800925c <USBD_LL_PrepareReceive>
 8007342:	e008      	b.n	8007356 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <USBD_CDC_ReceivePacket+0x68>)
 8007346:	7819      	ldrb	r1, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800734e:	2340      	movs	r3, #64	; 0x40
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 ff83 	bl	800925c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000094 	.word	0x20000094

08007364 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	e01f      	b.n	80073bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	79fa      	ldrb	r2, [r7, #7]
 80073ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 fdfd 	bl	8008fb0 <USBD_LL_Init>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	e025      	b.n	8007428 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	32ae      	adds	r2, #174	; 0xae
 80073ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00f      	beq.n	8007418 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32ae      	adds	r2, #174	; 0xae
 8007402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f107 020e 	add.w	r2, r7, #14
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
 8007410:	4602      	mov	r2, r0
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 fe05 	bl	8009048 <USBD_LL_Start>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	4611      	mov	r1, r2
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 f908 	bl	80086f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074f0:	461a      	mov	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2b02      	cmp	r3, #2
 8007504:	d01a      	beq.n	800753c <USBD_LL_SetupStage+0x72>
 8007506:	2b02      	cmp	r3, #2
 8007508:	d822      	bhi.n	8007550 <USBD_LL_SetupStage+0x86>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <USBD_LL_SetupStage+0x4a>
 800750e:	2b01      	cmp	r3, #1
 8007510:	d00a      	beq.n	8007528 <USBD_LL_SetupStage+0x5e>
 8007512:	e01d      	b.n	8007550 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fb5f 	bl	8007be0 <USBD_StdDevReq>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
      break;
 8007526:	e020      	b.n	800756a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fbc7 	bl	8007cc4 <USBD_StdItfReq>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
      break;
 800753a:	e016      	b.n	800756a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc29 	bl	8007d9c <USBD_StdEPReq>
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]
      break;
 800754e:	e00c      	b.n	800756a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fdd2 	bl	8009108 <USBD_LL_StallEP>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
      break;
 8007568:	bf00      	nop
  }

  return ret;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	460b      	mov	r3, r1
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d16e      	bne.n	800766a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007592:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800759a:	2b03      	cmp	r3, #3
 800759c:	f040 8098 	bne.w	80076d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d913      	bls.n	80075d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	1ad2      	subs	r2, r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bf28      	it	cs
 80075c6:	4613      	movcs	r3, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f001 f984 	bl	80088da <USBD_CtlContinueRx>
 80075d2:	e07d      	b.n	80076d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d014      	beq.n	800760c <USBD_LL_DataOutStage+0x98>
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d81d      	bhi.n	8007622 <USBD_LL_DataOutStage+0xae>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <USBD_LL_DataOutStage+0x7c>
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d003      	beq.n	80075f6 <USBD_LL_DataOutStage+0x82>
 80075ee:	e018      	b.n	8007622 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75bb      	strb	r3, [r7, #22]
            break;
 80075f4:	e018      	b.n	8007628 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fa5e 	bl	8007ac2 <USBD_CoreFindIF>
 8007606:	4603      	mov	r3, r0
 8007608:	75bb      	strb	r3, [r7, #22]
            break;
 800760a:	e00d      	b.n	8007628 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007612:	b2db      	uxtb	r3, r3
 8007614:	4619      	mov	r1, r3
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fa60 	bl	8007adc <USBD_CoreFindEP>
 800761c:	4603      	mov	r3, r0
 800761e:	75bb      	strb	r3, [r7, #22]
            break;
 8007620:	e002      	b.n	8007628 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	75bb      	strb	r3, [r7, #22]
            break;
 8007626:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007628:	7dbb      	ldrb	r3, [r7, #22]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d119      	bne.n	8007662 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d113      	bne.n	8007662 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800763a:	7dba      	ldrb	r2, [r7, #22]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	32ae      	adds	r2, #174	; 0xae
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800764a:	7dba      	ldrb	r2, [r7, #22]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007652:	7dba      	ldrb	r2, [r7, #22]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	32ae      	adds	r2, #174	; 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f001 f94a 	bl	80088fc <USBD_CtlSendStatus>
 8007668:	e032      	b.n	80076d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007670:	b2db      	uxtb	r3, r3
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fa31 	bl	8007adc <USBD_CoreFindEP>
 800767a:	4603      	mov	r3, r0
 800767c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800767e:	7dbb      	ldrb	r3, [r7, #22]
 8007680:	2bff      	cmp	r3, #255	; 0xff
 8007682:	d025      	beq.n	80076d0 <USBD_LL_DataOutStage+0x15c>
 8007684:	7dbb      	ldrb	r3, [r7, #22]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d122      	bne.n	80076d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b03      	cmp	r3, #3
 8007694:	d117      	bne.n	80076c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007696:	7dba      	ldrb	r2, [r7, #22]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	32ae      	adds	r2, #174	; 0xae
 800769c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076a6:	7dba      	ldrb	r2, [r7, #22]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076ae:	7dba      	ldrb	r2, [r7, #22]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	32ae      	adds	r2, #174	; 0xae
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	7afa      	ldrb	r2, [r7, #11]
 80076bc:	4611      	mov	r1, r2
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	4798      	blx	r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	e000      	b.n	80076d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	460b      	mov	r3, r1
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d16f      	bne.n	80077ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3314      	adds	r3, #20
 80076f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d15a      	bne.n	80077b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	429a      	cmp	r2, r3
 8007708:	d914      	bls.n	8007734 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	1ad2      	subs	r2, r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	461a      	mov	r2, r3
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f001 f8ac 	bl	800887e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007726:	2300      	movs	r3, #0
 8007728:	2200      	movs	r2, #0
 800772a:	2100      	movs	r1, #0
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 fd95 	bl	800925c <USBD_LL_PrepareReceive>
 8007732:	e03f      	b.n	80077b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	d11c      	bne.n	800777a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007748:	429a      	cmp	r2, r3
 800774a:	d316      	bcc.n	800777a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007756:	429a      	cmp	r2, r3
 8007758:	d20f      	bcs.n	800777a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f001 f88d 	bl	800887e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f001 fd72 	bl	800925c <USBD_LL_PrepareReceive>
 8007778:	e01c      	b.n	80077b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10f      	bne.n	80077a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077a6:	2180      	movs	r1, #128	; 0x80
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f001 fcad 	bl	8009108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f001 f8b7 	bl	8008922 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d03a      	beq.n	8007834 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fe42 	bl	8007448 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077cc:	e032      	b.n	8007834 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f97f 	bl	8007adc <USBD_CoreFindEP>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2bff      	cmp	r3, #255	; 0xff
 80077e6:	d025      	beq.n	8007834 <USBD_LL_DataInStage+0x15a>
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d122      	bne.n	8007834 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d11c      	bne.n	8007834 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077fa:	7dfa      	ldrb	r2, [r7, #23]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	32ae      	adds	r2, #174	; 0xae
 8007800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800780a:	7dfa      	ldrb	r2, [r7, #23]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007812:	7dfa      	ldrb	r2, [r7, #23]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	32ae      	adds	r2, #174	; 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	7afa      	ldrb	r2, [r7, #11]
 8007820:	4611      	mov	r1, r2
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800782a:	7dbb      	ldrb	r3, [r7, #22]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007830:	7dbb      	ldrb	r3, [r7, #22]
 8007832:	e000      	b.n	8007836 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6852      	ldr	r2, [r2, #4]
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	4611      	mov	r1, r2
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078a4:	2340      	movs	r3, #64	; 0x40
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fbe7 	bl	800907e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2240      	movs	r2, #64	; 0x40
 80078bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	2200      	movs	r2, #0
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fbd9 	bl	800907e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	621a      	str	r2, [r3, #32]

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b04      	cmp	r3, #4
 8007940:	d106      	bne.n	8007950 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007948:	b2da      	uxtb	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b03      	cmp	r3, #3
 8007970:	d110      	bne.n	8007994 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	32ae      	adds	r2, #174	; 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	e01c      	b.n	80079fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d115      	bne.n	80079f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32ae      	adds	r2, #174	; 0xae
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	; 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	32ae      	adds	r2, #174	; 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e01c      	b.n	8007a5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d115      	bne.n	8007a5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32ae      	adds	r2, #174	; 0xae
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32ae      	adds	r2, #174	; 0xae
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	4611      	mov	r1, r2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6852      	ldr	r2, [r2, #4]
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ace:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ae8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d920      	bls.n	8007b60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b26:	e013      	b.n	8007b50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b28:	f107 030a 	add.w	r3, r7, #10
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f000 f81b 	bl	8007b6a <USBD_GetNextDesc>
 8007b34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	d108      	bne.n	8007b50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	789b      	ldrb	r3, [r3, #2]
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d008      	beq.n	8007b5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	897b      	ldrh	r3, [r7, #10]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d8e5      	bhi.n	8007b28 <USBD_GetEpDesc+0x32>
 8007b5c:	e000      	b.n	8007b60 <USBD_GetEpDesc+0x6a>
          break;
 8007b5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b60:	693b      	ldr	r3, [r7, #16]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	881a      	ldrh	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b96:	68fb      	ldr	r3, [r7, #12]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bc2:	8a3b      	ldrh	r3, [r7, #16]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bd2:	89fb      	ldrh	r3, [r7, #14]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	371c      	adds	r7, #28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d005      	beq.n	8007c06 <USBD_StdDevReq+0x26>
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d857      	bhi.n	8007cae <USBD_StdDevReq+0xce>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00f      	beq.n	8007c22 <USBD_StdDevReq+0x42>
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d153      	bne.n	8007cae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32ae      	adds	r2, #174	; 0xae
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c20:	e04a      	b.n	8007cb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b09      	cmp	r3, #9
 8007c28:	d83b      	bhi.n	8007ca2 <USBD_StdDevReq+0xc2>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBD_StdDevReq+0x50>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c99 	.word	0x08007c99
 8007c38:	08007ca3 	.word	0x08007ca3
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007ca3 	.word	0x08007ca3
 8007c44:	08007c63 	.word	0x08007c63
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007ca3 	.word	0x08007ca3
 8007c50:	08007c7b 	.word	0x08007c7b
 8007c54:	08007c6d 	.word	0x08007c6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa3c 	bl	80080d8 <USBD_GetDescriptor>
          break;
 8007c60:	e024      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fba1 	bl	80083ac <USBD_SetAddress>
          break;
 8007c6a:	e01f      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fbe0 	bl	8008434 <USBD_SetConfig>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
          break;
 8007c78:	e018      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc83 	bl	8008588 <USBD_GetConfig>
          break;
 8007c82:	e013      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fcb4 	bl	80085f4 <USBD_GetStatus>
          break;
 8007c8c:	e00e      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fce3 	bl	800865c <USBD_SetFeature>
          break;
 8007c96:	e009      	b.n	8007cac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fd07 	bl	80086ae <USBD_ClrFeature>
          break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd5e 	bl	8008766 <USBD_CtlError>
          break;
 8007caa:	bf00      	nop
      }
      break;
 8007cac:	e004      	b.n	8007cb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd58 	bl	8008766 <USBD_CtlError>
      break;
 8007cb6:	bf00      	nop
  }

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop

08007cc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d005      	beq.n	8007cea <USBD_StdItfReq+0x26>
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d852      	bhi.n	8007d88 <USBD_StdItfReq+0xc4>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <USBD_StdItfReq+0x26>
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d14e      	bne.n	8007d88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d840      	bhi.n	8007d7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	889b      	ldrh	r3, [r3, #4]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d836      	bhi.n	8007d70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	889b      	ldrh	r3, [r3, #4]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fed9 	bl	8007ac2 <USBD_CoreFindIF>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2bff      	cmp	r3, #255	; 0xff
 8007d18:	d01d      	beq.n	8007d56 <USBD_StdItfReq+0x92>
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11a      	bne.n	8007d56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d20:	7bba      	ldrb	r2, [r7, #14]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	32ae      	adds	r2, #174	; 0xae
 8007d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d30:	7bba      	ldrb	r2, [r7, #14]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d38:	7bba      	ldrb	r2, [r7, #14]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32ae      	adds	r2, #174	; 0xae
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d4e:	e004      	b.n	8007d5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d50:	2303      	movs	r3, #3
 8007d52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d54:	e001      	b.n	8007d5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	88db      	ldrh	r3, [r3, #6]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d110      	bne.n	8007d84 <USBD_StdItfReq+0xc0>
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10d      	bne.n	8007d84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fdc7 	bl	80088fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d6e:	e009      	b.n	8007d84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fcf7 	bl	8008766 <USBD_CtlError>
          break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fcf2 	bl	8008766 <USBD_CtlError>
          break;
 8007d82:	e000      	b.n	8007d86 <USBD_StdItfReq+0xc2>
          break;
 8007d84:	bf00      	nop
      }
      break;
 8007d86:	e004      	b.n	8007d92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fceb 	bl	8008766 <USBD_CtlError>
      break;
 8007d90:	bf00      	nop
  }

  return ret;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	889b      	ldrh	r3, [r3, #4]
 8007dae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007db8:	2b40      	cmp	r3, #64	; 0x40
 8007dba:	d007      	beq.n	8007dcc <USBD_StdEPReq+0x30>
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	f200 817f 	bhi.w	80080c0 <USBD_StdEPReq+0x324>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d02a      	beq.n	8007e1c <USBD_StdEPReq+0x80>
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	f040 817a 	bne.w	80080c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fe83 	bl	8007adc <USBD_CoreFindEP>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dda:	7b7b      	ldrb	r3, [r7, #13]
 8007ddc:	2bff      	cmp	r3, #255	; 0xff
 8007dde:	f000 8174 	beq.w	80080ca <USBD_StdEPReq+0x32e>
 8007de2:	7b7b      	ldrb	r3, [r7, #13]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 8170 	bne.w	80080ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007dea:	7b7a      	ldrb	r2, [r7, #13]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007df2:	7b7a      	ldrb	r2, [r7, #13]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32ae      	adds	r2, #174	; 0xae
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8163 	beq.w	80080ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e04:	7b7a      	ldrb	r2, [r7, #13]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	; 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e1a:	e156      	b.n	80080ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d008      	beq.n	8007e36 <USBD_StdEPReq+0x9a>
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	f300 8145 	bgt.w	80080b4 <USBD_StdEPReq+0x318>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 809b 	beq.w	8007f66 <USBD_StdEPReq+0x1ca>
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d03c      	beq.n	8007eae <USBD_StdEPReq+0x112>
 8007e34:	e13e      	b.n	80080b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d002      	beq.n	8007e48 <USBD_StdEPReq+0xac>
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d016      	beq.n	8007e74 <USBD_StdEPReq+0xd8>
 8007e46:	e02c      	b.n	8007ea2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00d      	beq.n	8007e6a <USBD_StdEPReq+0xce>
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b80      	cmp	r3, #128	; 0x80
 8007e52:	d00a      	beq.n	8007e6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f955 	bl	8009108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 f951 	bl	8009108 <USBD_LL_StallEP>
 8007e66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e68:	e020      	b.n	8007eac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc7a 	bl	8008766 <USBD_CtlError>
              break;
 8007e72:	e01b      	b.n	8007eac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10e      	bne.n	8007e9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <USBD_StdEPReq+0xfe>
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d008      	beq.n	8007e9a <USBD_StdEPReq+0xfe>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f937 	bl	8009108 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fd2e 	bl	80088fc <USBD_CtlSendStatus>

              break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc5e 	bl	8008766 <USBD_CtlError>
              break;
 8007eaa:	bf00      	nop
          }
          break;
 8007eac:	e107      	b.n	80080be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d002      	beq.n	8007ec0 <USBD_StdEPReq+0x124>
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d016      	beq.n	8007eec <USBD_StdEPReq+0x150>
 8007ebe:	e04b      	b.n	8007f58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <USBD_StdEPReq+0x146>
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d00a      	beq.n	8007ee2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f919 	bl	8009108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f915 	bl	8009108 <USBD_LL_StallEP>
 8007ede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ee0:	e040      	b.n	8007f64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc3e 	bl	8008766 <USBD_CtlError>
              break;
 8007eea:	e03b      	b.n	8007f64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	885b      	ldrh	r3, [r3, #2]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d136      	bne.n	8007f62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f91f 	bl	8009146 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcf7 	bl	80088fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fde2 	bl	8007adc <USBD_CoreFindEP>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f1c:	7b7b      	ldrb	r3, [r7, #13]
 8007f1e:	2bff      	cmp	r3, #255	; 0xff
 8007f20:	d01f      	beq.n	8007f62 <USBD_StdEPReq+0x1c6>
 8007f22:	7b7b      	ldrb	r3, [r7, #13]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d11c      	bne.n	8007f62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f28:	7b7a      	ldrb	r2, [r7, #13]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f30:	7b7a      	ldrb	r2, [r7, #13]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32ae      	adds	r2, #174	; 0xae
 8007f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f40:	7b7a      	ldrb	r2, [r7, #13]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32ae      	adds	r2, #174	; 0xae
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f56:	e004      	b.n	8007f62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fc03 	bl	8008766 <USBD_CtlError>
              break;
 8007f60:	e000      	b.n	8007f64 <USBD_StdEPReq+0x1c8>
              break;
 8007f62:	bf00      	nop
          }
          break;
 8007f64:	e0ab      	b.n	80080be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d002      	beq.n	8007f78 <USBD_StdEPReq+0x1dc>
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d032      	beq.n	8007fdc <USBD_StdEPReq+0x240>
 8007f76:	e097      	b.n	80080a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <USBD_StdEPReq+0x1f2>
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d004      	beq.n	8007f8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fbed 	bl	8008766 <USBD_CtlError>
                break;
 8007f8c:	e091      	b.n	80080b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da0b      	bge.n	8007fae <USBD_StdEPReq+0x212>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	3310      	adds	r3, #16
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	3304      	adds	r3, #4
 8007fac:	e00b      	b.n	8007fc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc37 	bl	8008848 <USBD_CtlSendData>
              break;
 8007fda:	e06a      	b.n	80080b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da11      	bge.n	8008008 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	f003 020f 	and.w	r2, r3, #15
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d117      	bne.n	800802e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fbb0 	bl	8008766 <USBD_CtlError>
                  break;
 8008006:	e054      	b.n	80080b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fb9d 	bl	8008766 <USBD_CtlError>
                  break;
 800802c:	e041      	b.n	80080b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800802e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da0b      	bge.n	800804e <USBD_StdEPReq+0x2b2>
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	3310      	adds	r3, #16
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	3304      	adds	r3, #4
 800804c:	e00b      	b.n	8008066 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	4413      	add	r3, r2
 8008064:	3304      	adds	r3, #4
 8008066:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <USBD_StdEPReq+0x2d8>
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b80      	cmp	r3, #128	; 0x80
 8008072:	d103      	bne.n	800807c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e00e      	b.n	800809a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f87f 	bl	8009184 <USBD_LL_IsStallEP>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2201      	movs	r2, #1
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	e002      	b.n	800809a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2202      	movs	r2, #2
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fbd1 	bl	8008848 <USBD_CtlSendData>
              break;
 80080a6:	e004      	b.n	80080b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb5b 	bl	8008766 <USBD_CtlError>
              break;
 80080b0:	bf00      	nop
          }
          break;
 80080b2:	e004      	b.n	80080be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fb55 	bl	8008766 <USBD_CtlError>
          break;
 80080bc:	bf00      	nop
      }
      break;
 80080be:	e005      	b.n	80080cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fb4f 	bl	8008766 <USBD_CtlError>
      break;
 80080c8:	e000      	b.n	80080cc <USBD_StdEPReq+0x330>
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	885b      	ldrh	r3, [r3, #2]
 80080f2:	0a1b      	lsrs	r3, r3, #8
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	f200 8128 	bhi.w	800834e <USBD_GetDescriptor+0x276>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_GetDescriptor+0x2c>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008121 	.word	0x08008121
 8008108:	08008139 	.word	0x08008139
 800810c:	08008179 	.word	0x08008179
 8008110:	0800834f 	.word	0x0800834f
 8008114:	0800834f 	.word	0x0800834f
 8008118:	080082ef 	.word	0x080082ef
 800811c:	0800831b 	.word	0x0800831b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
      break;
 8008136:	e112      	b.n	800835e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7c1b      	ldrb	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10d      	bne.n	800815c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f107 0208 	add.w	r2, r7, #8
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
 8008150:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	2202      	movs	r2, #2
 8008158:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800815a:	e100      	b.n	800835e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	f107 0208 	add.w	r2, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	2202      	movs	r2, #2
 8008174:	701a      	strb	r2, [r3, #0]
      break;
 8008176:	e0f2      	b.n	800835e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	885b      	ldrh	r3, [r3, #2]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b05      	cmp	r3, #5
 8008180:	f200 80ac 	bhi.w	80082dc <USBD_GetDescriptor+0x204>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <USBD_GetDescriptor+0xb4>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	080081a5 	.word	0x080081a5
 8008190:	080081d9 	.word	0x080081d9
 8008194:	0800820d 	.word	0x0800820d
 8008198:	08008241 	.word	0x08008241
 800819c:	08008275 	.word	0x08008275
 80081a0:	080082a9 	.word	0x080082a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c6:	e091      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 facb 	bl	8008766 <USBD_CtlError>
            err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
          break;
 80081d6:	e089      	b.n	80082ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e077      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fab1 	bl	8008766 <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e06f      	b.n	80082ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e05d      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa97 	bl	8008766 <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e055      	b.n	80082ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e043      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa7d 	bl	8008766 <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e03b      	b.n	80082ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e029      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa63 	bl	8008766 <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e021      	b.n	80082ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e00f      	b.n	80082ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa49 	bl	8008766 <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e007      	b.n	80082ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa41 	bl	8008766 <USBD_CtlError>
          err++;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	3301      	adds	r3, #1
 80082e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80082ea:	bf00      	nop
      }
      break;
 80082ec:	e037      	b.n	800835e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7c1b      	ldrb	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f107 0208 	add.w	r2, r7, #8
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008308:	e029      	b.n	800835e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa2a 	bl	8008766 <USBD_CtlError>
        err++;
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	3301      	adds	r3, #1
 8008316:	72fb      	strb	r3, [r7, #11]
      break;
 8008318:	e021      	b.n	800835e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	7c1b      	ldrb	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10d      	bne.n	800833e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	f107 0208 	add.w	r2, r7, #8
 800832e:	4610      	mov	r0, r2
 8008330:	4798      	blx	r3
 8008332:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	2207      	movs	r2, #7
 800833a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833c:	e00f      	b.n	800835e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa10 	bl	8008766 <USBD_CtlError>
        err++;
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	3301      	adds	r3, #1
 800834a:	72fb      	strb	r3, [r7, #11]
      break;
 800834c:	e007      	b.n	800835e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa08 	bl	8008766 <USBD_CtlError>
      err++;
 8008356:	7afb      	ldrb	r3, [r7, #11]
 8008358:	3301      	adds	r3, #1
 800835a:	72fb      	strb	r3, [r7, #11]
      break;
 800835c:	bf00      	nop
  }

  if (err != 0U)
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d11e      	bne.n	80083a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	88db      	ldrh	r3, [r3, #6]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d016      	beq.n	800839a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800836c:	893b      	ldrh	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	88da      	ldrh	r2, [r3, #6]
 8008376:	893b      	ldrh	r3, [r7, #8]
 8008378:	4293      	cmp	r3, r2
 800837a:	bf28      	it	cs
 800837c:	4613      	movcs	r3, r2
 800837e:	b29b      	uxth	r3, r3
 8008380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008382:	893b      	ldrh	r3, [r7, #8]
 8008384:	461a      	mov	r2, r3
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa5d 	bl	8008848 <USBD_CtlSendData>
 800838e:	e009      	b.n	80083a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9e7 	bl	8008766 <USBD_CtlError>
 8008398:	e004      	b.n	80083a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 faae 	bl	80088fc <USBD_CtlSendStatus>
 80083a0:	e000      	b.n	80083a4 <USBD_GetDescriptor+0x2cc>
    return;
 80083a2:	bf00      	nop
  }
}
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	889b      	ldrh	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d131      	bne.n	8008422 <USBD_SetAddress+0x76>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	88db      	ldrh	r3, [r3, #6]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d12d      	bne.n	8008422 <USBD_SetAddress+0x76>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	2b7f      	cmp	r3, #127	; 0x7f
 80083cc:	d829      	bhi.n	8008422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	885b      	ldrh	r3, [r3, #2]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d104      	bne.n	80083f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9bc 	bl	8008766 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	e01d      	b.n	800842c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 feed 	bl	80091dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa7a 	bl	80088fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	e009      	b.n	800842c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	e004      	b.n	800842c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f99e 	bl	8008766 <USBD_CtlError>
  }
}
 800842a:	bf00      	nop
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	b2da      	uxtb	r2, r3
 8008448:	4b4e      	ldr	r3, [pc, #312]	; (8008584 <USBD_SetConfig+0x150>)
 800844a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800844c:	4b4d      	ldr	r3, [pc, #308]	; (8008584 <USBD_SetConfig+0x150>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d905      	bls.n	8008460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f985 	bl	8008766 <USBD_CtlError>
    return USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	e08c      	b.n	800857a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d002      	beq.n	8008472 <USBD_SetConfig+0x3e>
 800846c:	2b03      	cmp	r3, #3
 800846e:	d029      	beq.n	80084c4 <USBD_SetConfig+0x90>
 8008470:	e075      	b.n	800855e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008472:	4b44      	ldr	r3, [pc, #272]	; (8008584 <USBD_SetConfig+0x150>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d020      	beq.n	80084bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800847a:	4b42      	ldr	r3, [pc, #264]	; (8008584 <USBD_SetConfig+0x150>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008484:	4b3f      	ldr	r3, [pc, #252]	; (8008584 <USBD_SetConfig+0x150>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fe ffe7 	bl	800745e <USBD_SetClassConfig>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f962 	bl	8008766 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084aa:	e065      	b.n	8008578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa25 	bl	80088fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2203      	movs	r2, #3
 80084b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ba:	e05d      	b.n	8008578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa1d 	bl	80088fc <USBD_CtlSendStatus>
      break;
 80084c2:	e059      	b.n	8008578 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084c4:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <USBD_SetConfig+0x150>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d112      	bne.n	80084f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80084d4:	4b2b      	ldr	r3, [pc, #172]	; (8008584 <USBD_SetConfig+0x150>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084de:	4b29      	ldr	r3, [pc, #164]	; (8008584 <USBD_SetConfig+0x150>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe ffd6 	bl	8007496 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa06 	bl	80088fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084f0:	e042      	b.n	8008578 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <USBD_SetConfig+0x150>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d02a      	beq.n	8008556 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe ffc4 	bl	8007496 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800850e:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <USBD_SetConfig+0x150>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <USBD_SetConfig+0x150>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe ff9d 	bl	800745e <USBD_SetClassConfig>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00f      	beq.n	800854e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f918 	bl	8008766 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe ffa9 	bl	8007496 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800854c:	e014      	b.n	8008578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f9d4 	bl	80088fc <USBD_CtlSendStatus>
      break;
 8008554:	e010      	b.n	8008578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f9d0 	bl	80088fc <USBD_CtlSendStatus>
      break;
 800855c:	e00c      	b.n	8008578 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f900 	bl	8008766 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008566:	4b07      	ldr	r3, [pc, #28]	; (8008584 <USBD_SetConfig+0x150>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe ff92 	bl	8007496 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008572:	2303      	movs	r3, #3
 8008574:	73fb      	strb	r3, [r7, #15]
      break;
 8008576:	bf00      	nop
  }

  return ret;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	200023b8 	.word	0x200023b8

08008588 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d004      	beq.n	80085a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f8e2 	bl	8008766 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085a2:	e023      	b.n	80085ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	dc02      	bgt.n	80085b6 <USBD_GetConfig+0x2e>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc03      	bgt.n	80085bc <USBD_GetConfig+0x34>
 80085b4:	e015      	b.n	80085e2 <USBD_GetConfig+0x5a>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d00b      	beq.n	80085d2 <USBD_GetConfig+0x4a>
 80085ba:	e012      	b.n	80085e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3308      	adds	r3, #8
 80085c6:	2201      	movs	r2, #1
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f93c 	bl	8008848 <USBD_CtlSendData>
        break;
 80085d0:	e00c      	b.n	80085ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3304      	adds	r3, #4
 80085d6:	2201      	movs	r2, #1
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f934 	bl	8008848 <USBD_CtlSendData>
        break;
 80085e0:	e004      	b.n	80085ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f8be 	bl	8008766 <USBD_CtlError>
        break;
 80085ea:	bf00      	nop
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	2b02      	cmp	r3, #2
 800860a:	d81e      	bhi.n	800864a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d004      	beq.n	800861e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8a5 	bl	8008766 <USBD_CtlError>
        break;
 800861c:	e01a      	b.n	8008654 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f043 0202 	orr.w	r2, r3, #2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	330c      	adds	r3, #12
 800863e:	2202      	movs	r2, #2
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f900 	bl	8008848 <USBD_CtlSendData>
      break;
 8008648:	e004      	b.n	8008654 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f88a 	bl	8008766 <USBD_CtlError>
      break;
 8008652:	bf00      	nop
  }
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d107      	bne.n	800867e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f940 	bl	80088fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800867c:	e013      	b.n	80086a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	885b      	ldrh	r3, [r3, #2]
 8008682:	2b02      	cmp	r3, #2
 8008684:	d10b      	bne.n	800869e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	889b      	ldrh	r3, [r3, #4]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	b29b      	uxth	r3, r3
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f930 	bl	80088fc <USBD_CtlSendStatus>
}
 800869c:	e003      	b.n	80086a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f860 	bl	8008766 <USBD_CtlError>
}
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d80b      	bhi.n	80086de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	885b      	ldrh	r3, [r3, #2]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d10c      	bne.n	80086e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f910 	bl	80088fc <USBD_CtlSendStatus>
      }
      break;
 80086dc:	e004      	b.n	80086e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f840 	bl	8008766 <USBD_CtlError>
      break;
 80086e6:	e000      	b.n	80086ea <USBD_ClrFeature+0x3c>
      break;
 80086e8:	bf00      	nop
  }
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f7ff fa41 	bl	8007ba4 <SWAPBYTE>
 8008722:	4603      	mov	r3, r0
 8008724:	461a      	mov	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7ff fa34 	bl	8007ba4 <SWAPBYTE>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fa27 	bl	8007ba4 <SWAPBYTE>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	80da      	strh	r2, [r3, #6]
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008770:	2180      	movs	r1, #128	; 0x80
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fcc8 	bl	8009108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008778:	2100      	movs	r1, #0
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fcc4 	bl	8009108 <USBD_LL_StallEP>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d036      	beq.n	800880c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087a2:	6938      	ldr	r0, [r7, #16]
 80087a4:	f000 f836 	bl	8008814 <USBD_GetLen>
 80087a8:	4603      	mov	r3, r0
 80087aa:	3301      	adds	r3, #1
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7812      	ldrb	r2, [r2, #0]
 80087c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	2203      	movs	r2, #3
 80087d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	3301      	adds	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087d8:	e013      	b.n	8008802 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	4413      	add	r3, r2
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3301      	adds	r3, #1
 80087ea:	613b      	str	r3, [r7, #16]
    idx++;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	4413      	add	r3, r2
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	3301      	adds	r3, #1
 8008800:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e7      	bne.n	80087da <USBD_GetString+0x52>
 800880a:	e000      	b.n	800880e <USBD_GetString+0x86>
    return;
 800880c:	bf00      	nop
  }
}
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008824:	e005      	b.n	8008832 <USBD_GetLen+0x1e>
  {
    len++;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	3301      	adds	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	3301      	adds	r3, #1
 8008830:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f5      	bne.n	8008826 <USBD_GetLen+0x12>
  }

  return len;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2202      	movs	r2, #2
 8008858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 fcd3 	bl	800921a <USBD_LL_Transmit>

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	2100      	movs	r1, #0
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fcc2 	bl	800921a <USBD_LL_Transmit>

  return USBD_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2203      	movs	r2, #3
 80088b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	2100      	movs	r1, #0
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fcc6 	bl	800925c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	2100      	movs	r1, #0
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fcb5 	bl	800925c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2204      	movs	r2, #4
 8008908:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800890c:	2300      	movs	r3, #0
 800890e:	2200      	movs	r2, #0
 8008910:	2100      	movs	r1, #0
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fc81 	bl	800921a <USBD_LL_Transmit>

  return USBD_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2205      	movs	r2, #5
 800892e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008932:	2300      	movs	r3, #0
 8008934:	2200      	movs	r2, #0
 8008936:	2100      	movs	r1, #0
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fc8f 	bl	800925c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800894c:	2200      	movs	r2, #0
 800894e:	4912      	ldr	r1, [pc, #72]	; (8008998 <MX_USB_DEVICE_Init+0x50>)
 8008950:	4812      	ldr	r0, [pc, #72]	; (800899c <MX_USB_DEVICE_Init+0x54>)
 8008952:	f7fe fd07 	bl	8007364 <USBD_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800895c:	f7f8 f8de 	bl	8000b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008960:	490f      	ldr	r1, [pc, #60]	; (80089a0 <MX_USB_DEVICE_Init+0x58>)
 8008962:	480e      	ldr	r0, [pc, #56]	; (800899c <MX_USB_DEVICE_Init+0x54>)
 8008964:	f7fe fd2e 	bl	80073c4 <USBD_RegisterClass>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800896e:	f7f8 f8d5 	bl	8000b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008972:	490c      	ldr	r1, [pc, #48]	; (80089a4 <MX_USB_DEVICE_Init+0x5c>)
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <MX_USB_DEVICE_Init+0x54>)
 8008976:	f7fe fc65 	bl	8007244 <USBD_CDC_RegisterInterface>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008980:	f7f8 f8cc 	bl	8000b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008984:	4805      	ldr	r0, [pc, #20]	; (800899c <MX_USB_DEVICE_Init+0x54>)
 8008986:	f7fe fd53 	bl	8007430 <USBD_Start>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008990:	f7f8 f8c4 	bl	8000b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008994:	bf00      	nop
 8008996:	bd80      	pop	{r7, pc}
 8008998:	200000ac 	.word	0x200000ac
 800899c:	200023bc 	.word	0x200023bc
 80089a0:	20000018 	.word	0x20000018
 80089a4:	20000098 	.word	0x20000098

080089a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089ac:	2200      	movs	r2, #0
 80089ae:	4905      	ldr	r1, [pc, #20]	; (80089c4 <CDC_Init_FS+0x1c>)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <CDC_Init_FS+0x20>)
 80089b2:	f7fe fc61 	bl	8007278 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089b6:	4905      	ldr	r1, [pc, #20]	; (80089cc <CDC_Init_FS+0x24>)
 80089b8:	4803      	ldr	r0, [pc, #12]	; (80089c8 <CDC_Init_FS+0x20>)
 80089ba:	f7fe fc7f 	bl	80072bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20002e98 	.word	0x20002e98
 80089c8:	200023bc 	.word	0x200023bc
 80089cc:	20002698 	.word	0x20002698

080089d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	2b23      	cmp	r3, #35	; 0x23
 80089f4:	d84a      	bhi.n	8008a8c <CDC_Control_FS+0xac>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <CDC_Control_FS+0x1c>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a8d 	.word	0x08008a8d
 8008a00:	08008a8d 	.word	0x08008a8d
 8008a04:	08008a8d 	.word	0x08008a8d
 8008a08:	08008a8d 	.word	0x08008a8d
 8008a0c:	08008a8d 	.word	0x08008a8d
 8008a10:	08008a8d 	.word	0x08008a8d
 8008a14:	08008a8d 	.word	0x08008a8d
 8008a18:	08008a8d 	.word	0x08008a8d
 8008a1c:	08008a8d 	.word	0x08008a8d
 8008a20:	08008a8d 	.word	0x08008a8d
 8008a24:	08008a8d 	.word	0x08008a8d
 8008a28:	08008a8d 	.word	0x08008a8d
 8008a2c:	08008a8d 	.word	0x08008a8d
 8008a30:	08008a8d 	.word	0x08008a8d
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008a8d 	.word	0x08008a8d
 8008a3c:	08008a8d 	.word	0x08008a8d
 8008a40:	08008a8d 	.word	0x08008a8d
 8008a44:	08008a8d 	.word	0x08008a8d
 8008a48:	08008a8d 	.word	0x08008a8d
 8008a4c:	08008a8d 	.word	0x08008a8d
 8008a50:	08008a8d 	.word	0x08008a8d
 8008a54:	08008a8d 	.word	0x08008a8d
 8008a58:	08008a8d 	.word	0x08008a8d
 8008a5c:	08008a8d 	.word	0x08008a8d
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a8d 	.word	0x08008a8d
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008a8d 	.word	0x08008a8d
 8008a74:	08008a8d 	.word	0x08008a8d
 8008a78:	08008a8d 	.word	0x08008a8d
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a8d 	.word	0x08008a8d
 8008a84:	08008a8d 	.word	0x08008a8d
 8008a88:	08008a8d 	.word	0x08008a8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a8c:	bf00      	nop
  }

  return (USBD_OK);
 8008a8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <CDC_Receive_FS+0x24>)
 8008aaa:	f7fe fc07 	bl	80072bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008aae:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <CDC_Receive_FS+0x24>)
 8008ab0:	f7fe fc22 	bl	80072f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	200023bc 	.word	0x200023bc

08008ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2212      	movs	r2, #18
 8008af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008afa:	4b03      	ldr	r3, [pc, #12]	; (8008b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200000c8 	.word	0x200000c8

08008b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	200000dc 	.word	0x200000dc

08008b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b48:	f7ff fe1e 	bl	8008788 <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b54:	f7ff fe18 	bl	8008788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20003698 	.word	0x20003698
 8008b68:	08009cb4 	.word	0x08009cb4

08008b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	4904      	ldr	r1, [pc, #16]	; (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b7c:	4804      	ldr	r0, [pc, #16]	; (8008b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b7e:	f7ff fe03 	bl	8008788 <USBD_GetString>
  return USBD_StrDesc;
 8008b82:	4b02      	ldr	r3, [pc, #8]	; (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20003698 	.word	0x20003698
 8008b90:	08009ccc 	.word	0x08009ccc

08008b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	221a      	movs	r2, #26
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ba6:	f000 f843 	bl	8008c30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008baa:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200000e0 	.word	0x200000e0

08008bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4907      	ldr	r1, [pc, #28]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bce:	4808      	ldr	r0, [pc, #32]	; (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd0:	f7ff fdda 	bl	8008788 <USBD_GetString>
 8008bd4:	e004      	b.n	8008be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bda:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bdc:	f7ff fdd4 	bl	8008788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20003698 	.word	0x20003698
 8008bf0:	08009ce0 	.word	0x08009ce0

08008bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4907      	ldr	r1, [pc, #28]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0a:	4808      	ldr	r0, [pc, #32]	; (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c0c:	f7ff fdbc 	bl	8008788 <USBD_GetString>
 8008c10:	e004      	b.n	8008c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	4904      	ldr	r1, [pc, #16]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c16:	4805      	ldr	r0, [pc, #20]	; (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c18:	f7ff fdb6 	bl	8008788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20003698 	.word	0x20003698
 8008c2c:	08009cec 	.word	0x08009cec

08008c30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <Get_SerialNum+0x44>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <Get_SerialNum+0x48>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c42:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <Get_SerialNum+0x4c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c56:	2208      	movs	r2, #8
 8008c58:	4909      	ldr	r1, [pc, #36]	; (8008c80 <Get_SerialNum+0x50>)
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f814 	bl	8008c88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c60:	2204      	movs	r2, #4
 8008c62:	4908      	ldr	r1, [pc, #32]	; (8008c84 <Get_SerialNum+0x54>)
 8008c64:	68b8      	ldr	r0, [r7, #8]
 8008c66:	f000 f80f 	bl	8008c88 <IntToUnicode>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	1fff7a10 	.word	0x1fff7a10
 8008c78:	1fff7a14 	.word	0x1fff7a14
 8008c7c:	1fff7a18 	.word	0x1fff7a18
 8008c80:	200000e2 	.word	0x200000e2
 8008c84:	200000f2 	.word	0x200000f2

08008c88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	e027      	b.n	8008cf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d80b      	bhi.n	8008cc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3230      	adds	r2, #48	; 0x30
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e00a      	b.n	8008cd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	0f1b      	lsrs	r3, r3, #28
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	440b      	add	r3, r1
 8008cd0:	3237      	adds	r2, #55	; 0x37
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	3301      	adds	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
 8008cf0:	7dfa      	ldrb	r2, [r7, #23]
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3d3      	bcc.n	8008ca0 <IntToUnicode+0x18>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d28:	d147      	bne.n	8008dba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6313      	str	r3, [r2, #48]	; 0x30
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	4619      	mov	r1, r3
 8008d5a:	481b      	ldr	r0, [pc, #108]	; (8008dc8 <HAL_PCD_MspInit+0xc0>)
 8008d5c:	f7f9 fa9e 	bl	800229c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d66:	2302      	movs	r3, #2
 8008d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d72:	230a      	movs	r3, #10
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d76:	f107 0314 	add.w	r3, r7, #20
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4812      	ldr	r0, [pc, #72]	; (8008dc8 <HAL_PCD_MspInit+0xc0>)
 8008d7e:	f7f9 fa8d 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d82:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d86:	4a0f      	ldr	r2, [pc, #60]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	4a0b      	ldr	r2, [pc, #44]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <HAL_PCD_MspInit+0xbc>)
 8008da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	2043      	movs	r0, #67	; 0x43
 8008db0:	f7f8 fecd 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008db4:	2043      	movs	r0, #67	; 0x43
 8008db6:	f7f8 fee6 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dba:	bf00      	nop
 8008dbc:	3728      	adds	r7, #40	; 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40020000 	.word	0x40020000

08008dcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	f7fe fb71 	bl	80074ca <USBD_LL_SetupStage>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7fe fbab 	bl	8007574 <USBD_LL_DataOutStage>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e38:	78fa      	ldrb	r2, [r7, #3]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	334c      	adds	r3, #76	; 0x4c
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	f7fe fc44 	bl	80076da <USBD_LL_DataInStage>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fd78 	bl	800795e <USBD_LL_SOF>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
 8008e8e:	e008      	b.n	8008ea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d102      	bne.n	8008e9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
 8008e9c:	e001      	b.n	8008ea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e9e:	f7f7 fe3d 	bl	8000b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea8:	7bfa      	ldrb	r2, [r7, #15]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fd18 	bl	80078e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fcc0 	bl	800783e <USBD_LL_Reset>
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fd13 	bl	8007902 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	6812      	ldr	r2, [r2, #0]
 8008eea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <HAL_PCD_SuspendCallback+0x48>)
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	4a03      	ldr	r2, [pc, #12]	; (8008f10 <HAL_PCD_SuspendCallback+0x48>)
 8008f02:	f043 0306 	orr.w	r3, r3, #6
 8008f06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	e000ed00 	.word	0xe000ed00

08008f14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fd03 	bl	800792e <USBD_LL_Resume>
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fd5b 	bl	8007a02 <USBD_LL_IsoOUTIncomplete>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd17 	bl	800799e <USBD_LL_IsoINIncomplete>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fd6d 	bl	8007a66 <USBD_LL_DevConnected>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fd6a 	bl	8007a7c <USBD_LL_DevDisconnected>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d13c      	bne.n	800903a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fc0:	4a20      	ldr	r2, [pc, #128]	; (8009044 <USBD_LL_Init+0x94>)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a1e      	ldr	r2, [pc, #120]	; (8009044 <USBD_LL_Init+0x94>)
 8008fcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fd0:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <USBD_LL_Init+0x94>)
 8008fd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <USBD_LL_Init+0x94>)
 8008fda:	2204      	movs	r2, #4
 8008fdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fde:	4b19      	ldr	r3, [pc, #100]	; (8009044 <USBD_LL_Init+0x94>)
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <USBD_LL_Init+0x94>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <USBD_LL_Init+0x94>)
 8008fec:	2202      	movs	r2, #2
 8008fee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ff0:	4b14      	ldr	r3, [pc, #80]	; (8009044 <USBD_LL_Init+0x94>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ff6:	4b13      	ldr	r3, [pc, #76]	; (8009044 <USBD_LL_Init+0x94>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ffc:	4b11      	ldr	r3, [pc, #68]	; (8009044 <USBD_LL_Init+0x94>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009002:	4b10      	ldr	r3, [pc, #64]	; (8009044 <USBD_LL_Init+0x94>)
 8009004:	2201      	movs	r2, #1
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009008:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <USBD_LL_Init+0x94>)
 800900a:	2200      	movs	r2, #0
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800900e:	480d      	ldr	r0, [pc, #52]	; (8009044 <USBD_LL_Init+0x94>)
 8009010:	f7f9 fc3e 	bl	8002890 <HAL_PCD_Init>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800901a:	f7f7 fd7f 	bl	8000b1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800901e:	2180      	movs	r1, #128	; 0x80
 8009020:	4808      	ldr	r0, [pc, #32]	; (8009044 <USBD_LL_Init+0x94>)
 8009022:	f7fa fe96 	bl	8003d52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009026:	2240      	movs	r2, #64	; 0x40
 8009028:	2100      	movs	r1, #0
 800902a:	4806      	ldr	r0, [pc, #24]	; (8009044 <USBD_LL_Init+0x94>)
 800902c:	f7fa fe4a 	bl	8003cc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009030:	2280      	movs	r2, #128	; 0x80
 8009032:	2101      	movs	r1, #1
 8009034:	4803      	ldr	r0, [pc, #12]	; (8009044 <USBD_LL_Init+0x94>)
 8009036:	f7fa fe45 	bl	8003cc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20003898 	.word	0x20003898

08009048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800905e:	4618      	mov	r0, r3
 8009060:	f7f9 fd33 	bl	8002aca <HAL_PCD_Start>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f942 	bl	80092f4 <USBD_Get_USB_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009074:	7bbb      	ldrb	r3, [r7, #14]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	461a      	mov	r2, r3
 800908c:	4603      	mov	r3, r0
 800908e:	70fb      	strb	r3, [r7, #3]
 8009090:	460b      	mov	r3, r1
 8009092:	70bb      	strb	r3, [r7, #2]
 8009094:	4613      	mov	r3, r2
 8009096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090a6:	78bb      	ldrb	r3, [r7, #2]
 80090a8:	883a      	ldrh	r2, [r7, #0]
 80090aa:	78f9      	ldrb	r1, [r7, #3]
 80090ac:	f7fa fa04 	bl	80034b8 <HAL_PCD_EP_Open>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f91c 	bl	80092f4 <USBD_Get_USB_Status>
 80090bc:	4603      	mov	r3, r0
 80090be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fa fa4d 	bl	8003588 <HAL_PCD_EP_Close>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f8fd 	bl	80092f4 <USBD_Get_USB_Status>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7fa fb25 	bl	8003776 <HAL_PCD_EP_SetStall>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f8de 	bl	80092f4 <USBD_Get_USB_Status>
 8009138:	4603      	mov	r3, r0
 800913a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f7fa fb6a 	bl	800383e <HAL_PCD_EP_ClrStall>
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 f8bf 	bl	80092f4 <USBD_Get_USB_Status>
 8009176:	4603      	mov	r3, r0
 8009178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917a:	7bbb      	ldrb	r3, [r7, #14]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009196:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919c:	2b00      	cmp	r3, #0
 800919e:	da0b      	bge.n	80091b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	4613      	mov	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	333e      	adds	r3, #62	; 0x3e
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	e00b      	b.n	80091d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	4613      	mov	r3, r2
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80091ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fa f937 	bl	800346e <HAL_PCD_SetAddress>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f874 	bl	80092f4 <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	460b      	mov	r3, r1
 8009228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009238:	7af9      	ldrb	r1, [r7, #11]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	f7fa fa50 	bl	80036e2 <HAL_PCD_EP_Transmit>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f853 	bl	80092f4 <USBD_Get_USB_Status>
 800924e:	4603      	mov	r3, r0
 8009250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009252:	7dbb      	ldrb	r3, [r7, #22]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	460b      	mov	r3, r1
 800926a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800927a:	7af9      	ldrb	r1, [r7, #11]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f7fa f9cc 	bl	800361c <HAL_PCD_EP_Receive>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f832 	bl	80092f4 <USBD_Get_USB_Status>
 8009290:	4603      	mov	r3, r0
 8009292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009294:	7dbb      	ldrb	r3, [r7, #22]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fa f9fc 	bl	80036b2 <HAL_PCD_EP_GetRxCount>
 80092ba:	4603      	mov	r3, r0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <USBD_static_malloc+0x18>)
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20003da4 	.word	0x20003da4

080092e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b03      	cmp	r3, #3
 8009306:	d817      	bhi.n	8009338 <USBD_Get_USB_Status+0x44>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <USBD_Get_USB_Status+0x1c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009321 	.word	0x08009321
 8009314:	08009327 	.word	0x08009327
 8009318:	0800932d 	.word	0x0800932d
 800931c:	08009333 	.word	0x08009333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	e00b      	b.n	800933e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009326:	2303      	movs	r3, #3
 8009328:	73fb      	strb	r3, [r7, #15]
    break;
 800932a:	e008      	b.n	800933e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	e005      	b.n	800933e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
    break;
 8009336:	e002      	b.n	800933e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	bf00      	nop
  }
  return usb_status;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <siprintf>:
 800934c:	b40e      	push	{r1, r2, r3}
 800934e:	b500      	push	{lr}
 8009350:	b09c      	sub	sp, #112	; 0x70
 8009352:	ab1d      	add	r3, sp, #116	; 0x74
 8009354:	9002      	str	r0, [sp, #8]
 8009356:	9006      	str	r0, [sp, #24]
 8009358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <siprintf+0x38>)
 800935e:	9107      	str	r1, [sp, #28]
 8009360:	9104      	str	r1, [sp, #16]
 8009362:	4909      	ldr	r1, [pc, #36]	; (8009388 <siprintf+0x3c>)
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	9105      	str	r1, [sp, #20]
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	a902      	add	r1, sp, #8
 8009370:	f000 f992 	bl	8009698 <_svfiprintf_r>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	b01c      	add	sp, #112	; 0x70
 800937c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	20000148 	.word	0x20000148
 8009388:	ffff0208 	.word	0xffff0208

0800938c <memset>:
 800938c:	4402      	add	r2, r0
 800938e:	4603      	mov	r3, r0
 8009390:	4293      	cmp	r3, r2
 8009392:	d100      	bne.n	8009396 <memset+0xa>
 8009394:	4770      	bx	lr
 8009396:	f803 1b01 	strb.w	r1, [r3], #1
 800939a:	e7f9      	b.n	8009390 <memset+0x4>

0800939c <__errno>:
 800939c:	4b01      	ldr	r3, [pc, #4]	; (80093a4 <__errno+0x8>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000148 	.word	0x20000148

080093a8 <__libc_init_array>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	4d0d      	ldr	r5, [pc, #52]	; (80093e0 <__libc_init_array+0x38>)
 80093ac:	4c0d      	ldr	r4, [pc, #52]	; (80093e4 <__libc_init_array+0x3c>)
 80093ae:	1b64      	subs	r4, r4, r5
 80093b0:	10a4      	asrs	r4, r4, #2
 80093b2:	2600      	movs	r6, #0
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	d109      	bne.n	80093cc <__libc_init_array+0x24>
 80093b8:	4d0b      	ldr	r5, [pc, #44]	; (80093e8 <__libc_init_array+0x40>)
 80093ba:	4c0c      	ldr	r4, [pc, #48]	; (80093ec <__libc_init_array+0x44>)
 80093bc:	f000 fc6a 	bl	8009c94 <_init>
 80093c0:	1b64      	subs	r4, r4, r5
 80093c2:	10a4      	asrs	r4, r4, #2
 80093c4:	2600      	movs	r6, #0
 80093c6:	42a6      	cmp	r6, r4
 80093c8:	d105      	bne.n	80093d6 <__libc_init_array+0x2e>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d0:	4798      	blx	r3
 80093d2:	3601      	adds	r6, #1
 80093d4:	e7ee      	b.n	80093b4 <__libc_init_array+0xc>
 80093d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093da:	4798      	blx	r3
 80093dc:	3601      	adds	r6, #1
 80093de:	e7f2      	b.n	80093c6 <__libc_init_array+0x1e>
 80093e0:	08009d58 	.word	0x08009d58
 80093e4:	08009d58 	.word	0x08009d58
 80093e8:	08009d58 	.word	0x08009d58
 80093ec:	08009d5c 	.word	0x08009d5c

080093f0 <__retarget_lock_acquire_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <__retarget_lock_release_recursive>:
 80093f2:	4770      	bx	lr

080093f4 <_free_r>:
 80093f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d044      	beq.n	8009484 <_free_r+0x90>
 80093fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fe:	9001      	str	r0, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f1a1 0404 	sub.w	r4, r1, #4
 8009406:	bfb8      	it	lt
 8009408:	18e4      	addlt	r4, r4, r3
 800940a:	f000 f8df 	bl	80095cc <__malloc_lock>
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <_free_r+0x94>)
 8009410:	9801      	ldr	r0, [sp, #4]
 8009412:	6813      	ldr	r3, [r2, #0]
 8009414:	b933      	cbnz	r3, 8009424 <_free_r+0x30>
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	6014      	str	r4, [r2, #0]
 800941a:	b003      	add	sp, #12
 800941c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009420:	f000 b8da 	b.w	80095d8 <__malloc_unlock>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d908      	bls.n	800943a <_free_r+0x46>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf01      	itttt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	1949      	addeq	r1, r1, r5
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	e7ed      	b.n	8009416 <_free_r+0x22>
 800943a:	461a      	mov	r2, r3
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b10b      	cbz	r3, 8009444 <_free_r+0x50>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d9fa      	bls.n	800943a <_free_r+0x46>
 8009444:	6811      	ldr	r1, [r2, #0]
 8009446:	1855      	adds	r5, r2, r1
 8009448:	42a5      	cmp	r5, r4
 800944a:	d10b      	bne.n	8009464 <_free_r+0x70>
 800944c:	6824      	ldr	r4, [r4, #0]
 800944e:	4421      	add	r1, r4
 8009450:	1854      	adds	r4, r2, r1
 8009452:	42a3      	cmp	r3, r4
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	d1e0      	bne.n	800941a <_free_r+0x26>
 8009458:	681c      	ldr	r4, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	440c      	add	r4, r1
 8009460:	6014      	str	r4, [r2, #0]
 8009462:	e7da      	b.n	800941a <_free_r+0x26>
 8009464:	d902      	bls.n	800946c <_free_r+0x78>
 8009466:	230c      	movs	r3, #12
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	e7d6      	b.n	800941a <_free_r+0x26>
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1961      	adds	r1, r4, r5
 8009470:	428b      	cmp	r3, r1
 8009472:	bf04      	itt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	bf04      	itt	eq
 800947c:	1949      	addeq	r1, r1, r5
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	6054      	str	r4, [r2, #4]
 8009482:	e7ca      	b.n	800941a <_free_r+0x26>
 8009484:	b003      	add	sp, #12
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	20004104 	.word	0x20004104

0800948c <sbrk_aligned>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4e0e      	ldr	r6, [pc, #56]	; (80094c8 <sbrk_aligned+0x3c>)
 8009490:	460c      	mov	r4, r1
 8009492:	6831      	ldr	r1, [r6, #0]
 8009494:	4605      	mov	r5, r0
 8009496:	b911      	cbnz	r1, 800949e <sbrk_aligned+0x12>
 8009498:	f000 fba6 	bl	8009be8 <_sbrk_r>
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f000 fba1 	bl	8009be8 <_sbrk_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d00a      	beq.n	80094c0 <sbrk_aligned+0x34>
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d007      	beq.n	80094c4 <sbrk_aligned+0x38>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 fb96 	bl	8009be8 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d101      	bne.n	80094c4 <sbrk_aligned+0x38>
 80094c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094c4:	4620      	mov	r0, r4
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	20004108 	.word	0x20004108

080094cc <_malloc_r>:
 80094cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	1ccd      	adds	r5, r1, #3
 80094d2:	f025 0503 	bic.w	r5, r5, #3
 80094d6:	3508      	adds	r5, #8
 80094d8:	2d0c      	cmp	r5, #12
 80094da:	bf38      	it	cc
 80094dc:	250c      	movcc	r5, #12
 80094de:	2d00      	cmp	r5, #0
 80094e0:	4607      	mov	r7, r0
 80094e2:	db01      	blt.n	80094e8 <_malloc_r+0x1c>
 80094e4:	42a9      	cmp	r1, r5
 80094e6:	d905      	bls.n	80094f4 <_malloc_r+0x28>
 80094e8:	230c      	movs	r3, #12
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	2600      	movs	r6, #0
 80094ee:	4630      	mov	r0, r6
 80094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095c8 <_malloc_r+0xfc>
 80094f8:	f000 f868 	bl	80095cc <__malloc_lock>
 80094fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009500:	461c      	mov	r4, r3
 8009502:	bb5c      	cbnz	r4, 800955c <_malloc_r+0x90>
 8009504:	4629      	mov	r1, r5
 8009506:	4638      	mov	r0, r7
 8009508:	f7ff ffc0 	bl	800948c <sbrk_aligned>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	4604      	mov	r4, r0
 8009510:	d155      	bne.n	80095be <_malloc_r+0xf2>
 8009512:	f8d8 4000 	ldr.w	r4, [r8]
 8009516:	4626      	mov	r6, r4
 8009518:	2e00      	cmp	r6, #0
 800951a:	d145      	bne.n	80095a8 <_malloc_r+0xdc>
 800951c:	2c00      	cmp	r4, #0
 800951e:	d048      	beq.n	80095b2 <_malloc_r+0xe6>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	4631      	mov	r1, r6
 8009524:	4638      	mov	r0, r7
 8009526:	eb04 0903 	add.w	r9, r4, r3
 800952a:	f000 fb5d 	bl	8009be8 <_sbrk_r>
 800952e:	4581      	cmp	r9, r0
 8009530:	d13f      	bne.n	80095b2 <_malloc_r+0xe6>
 8009532:	6821      	ldr	r1, [r4, #0]
 8009534:	1a6d      	subs	r5, r5, r1
 8009536:	4629      	mov	r1, r5
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa7 	bl	800948c <sbrk_aligned>
 800953e:	3001      	adds	r0, #1
 8009540:	d037      	beq.n	80095b2 <_malloc_r+0xe6>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	442b      	add	r3, r5
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	f8d8 3000 	ldr.w	r3, [r8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d038      	beq.n	80095c2 <_malloc_r+0xf6>
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	42a2      	cmp	r2, r4
 8009554:	d12b      	bne.n	80095ae <_malloc_r+0xe2>
 8009556:	2200      	movs	r2, #0
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	e00f      	b.n	800957c <_malloc_r+0xb0>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	1b52      	subs	r2, r2, r5
 8009560:	d41f      	bmi.n	80095a2 <_malloc_r+0xd6>
 8009562:	2a0b      	cmp	r2, #11
 8009564:	d917      	bls.n	8009596 <_malloc_r+0xca>
 8009566:	1961      	adds	r1, r4, r5
 8009568:	42a3      	cmp	r3, r4
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	bf18      	it	ne
 800956e:	6059      	strne	r1, [r3, #4]
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	bf08      	it	eq
 8009574:	f8c8 1000 	streq.w	r1, [r8]
 8009578:	5162      	str	r2, [r4, r5]
 800957a:	604b      	str	r3, [r1, #4]
 800957c:	4638      	mov	r0, r7
 800957e:	f104 060b 	add.w	r6, r4, #11
 8009582:	f000 f829 	bl	80095d8 <__malloc_unlock>
 8009586:	f026 0607 	bic.w	r6, r6, #7
 800958a:	1d23      	adds	r3, r4, #4
 800958c:	1af2      	subs	r2, r6, r3
 800958e:	d0ae      	beq.n	80094ee <_malloc_r+0x22>
 8009590:	1b9b      	subs	r3, r3, r6
 8009592:	50a3      	str	r3, [r4, r2]
 8009594:	e7ab      	b.n	80094ee <_malloc_r+0x22>
 8009596:	42a3      	cmp	r3, r4
 8009598:	6862      	ldr	r2, [r4, #4]
 800959a:	d1dd      	bne.n	8009558 <_malloc_r+0x8c>
 800959c:	f8c8 2000 	str.w	r2, [r8]
 80095a0:	e7ec      	b.n	800957c <_malloc_r+0xb0>
 80095a2:	4623      	mov	r3, r4
 80095a4:	6864      	ldr	r4, [r4, #4]
 80095a6:	e7ac      	b.n	8009502 <_malloc_r+0x36>
 80095a8:	4634      	mov	r4, r6
 80095aa:	6876      	ldr	r6, [r6, #4]
 80095ac:	e7b4      	b.n	8009518 <_malloc_r+0x4c>
 80095ae:	4613      	mov	r3, r2
 80095b0:	e7cc      	b.n	800954c <_malloc_r+0x80>
 80095b2:	230c      	movs	r3, #12
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	4638      	mov	r0, r7
 80095b8:	f000 f80e 	bl	80095d8 <__malloc_unlock>
 80095bc:	e797      	b.n	80094ee <_malloc_r+0x22>
 80095be:	6025      	str	r5, [r4, #0]
 80095c0:	e7dc      	b.n	800957c <_malloc_r+0xb0>
 80095c2:	605b      	str	r3, [r3, #4]
 80095c4:	deff      	udf	#255	; 0xff
 80095c6:	bf00      	nop
 80095c8:	20004104 	.word	0x20004104

080095cc <__malloc_lock>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__malloc_lock+0x8>)
 80095ce:	f7ff bf0f 	b.w	80093f0 <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	20004100 	.word	0x20004100

080095d8 <__malloc_unlock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__malloc_unlock+0x8>)
 80095da:	f7ff bf0a 	b.w	80093f2 <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	20004100 	.word	0x20004100

080095e4 <__ssputs_r>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	688e      	ldr	r6, [r1, #8]
 80095ea:	461f      	mov	r7, r3
 80095ec:	42be      	cmp	r6, r7
 80095ee:	680b      	ldr	r3, [r1, #0]
 80095f0:	4682      	mov	sl, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	4690      	mov	r8, r2
 80095f6:	d82c      	bhi.n	8009652 <__ssputs_r+0x6e>
 80095f8:	898a      	ldrh	r2, [r1, #12]
 80095fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095fe:	d026      	beq.n	800964e <__ssputs_r+0x6a>
 8009600:	6965      	ldr	r5, [r4, #20]
 8009602:	6909      	ldr	r1, [r1, #16]
 8009604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009608:	eba3 0901 	sub.w	r9, r3, r1
 800960c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009610:	1c7b      	adds	r3, r7, #1
 8009612:	444b      	add	r3, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d527      	bpl.n	8009670 <__ssputs_r+0x8c>
 8009620:	4629      	mov	r1, r5
 8009622:	f7ff ff53 	bl	80094cc <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b360      	cbz	r0, 8009684 <__ssputs_r+0xa0>
 800962a:	6921      	ldr	r1, [r4, #16]
 800962c:	464a      	mov	r2, r9
 800962e:	f000 faeb 	bl	8009c08 <memcpy>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	6126      	str	r6, [r4, #16]
 8009640:	6165      	str	r5, [r4, #20]
 8009642:	444e      	add	r6, r9
 8009644:	eba5 0509 	sub.w	r5, r5, r9
 8009648:	6026      	str	r6, [r4, #0]
 800964a:	60a5      	str	r5, [r4, #8]
 800964c:	463e      	mov	r6, r7
 800964e:	42be      	cmp	r6, r7
 8009650:	d900      	bls.n	8009654 <__ssputs_r+0x70>
 8009652:	463e      	mov	r6, r7
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	4632      	mov	r2, r6
 8009658:	4641      	mov	r1, r8
 800965a:	f000 faab 	bl	8009bb4 <memmove>
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	1b9b      	subs	r3, r3, r6
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	4433      	add	r3, r6
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	2000      	movs	r0, #0
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	462a      	mov	r2, r5
 8009672:	f000 fad7 	bl	8009c24 <_realloc_r>
 8009676:	4606      	mov	r6, r0
 8009678:	2800      	cmp	r0, #0
 800967a:	d1e0      	bne.n	800963e <__ssputs_r+0x5a>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	4650      	mov	r0, sl
 8009680:	f7ff feb8 	bl	80093f4 <_free_r>
 8009684:	230c      	movs	r3, #12
 8009686:	f8ca 3000 	str.w	r3, [sl]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009696:	e7e9      	b.n	800966c <__ssputs_r+0x88>

08009698 <_svfiprintf_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4698      	mov	r8, r3
 800969e:	898b      	ldrh	r3, [r1, #12]
 80096a0:	061b      	lsls	r3, r3, #24
 80096a2:	b09d      	sub	sp, #116	; 0x74
 80096a4:	4607      	mov	r7, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	d50e      	bpl.n	80096ca <_svfiprintf_r+0x32>
 80096ac:	690b      	ldr	r3, [r1, #16]
 80096ae:	b963      	cbnz	r3, 80096ca <_svfiprintf_r+0x32>
 80096b0:	2140      	movs	r1, #64	; 0x40
 80096b2:	f7ff ff0b 	bl	80094cc <_malloc_r>
 80096b6:	6028      	str	r0, [r5, #0]
 80096b8:	6128      	str	r0, [r5, #16]
 80096ba:	b920      	cbnz	r0, 80096c6 <_svfiprintf_r+0x2e>
 80096bc:	230c      	movs	r3, #12
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c4:	e0d0      	b.n	8009868 <_svfiprintf_r+0x1d0>
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	616b      	str	r3, [r5, #20]
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	2320      	movs	r3, #32
 80096d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096d8:	2330      	movs	r3, #48	; 0x30
 80096da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009880 <_svfiprintf_r+0x1e8>
 80096de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e2:	f04f 0901 	mov.w	r9, #1
 80096e6:	4623      	mov	r3, r4
 80096e8:	469a      	mov	sl, r3
 80096ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ee:	b10a      	cbz	r2, 80096f4 <_svfiprintf_r+0x5c>
 80096f0:	2a25      	cmp	r2, #37	; 0x25
 80096f2:	d1f9      	bne.n	80096e8 <_svfiprintf_r+0x50>
 80096f4:	ebba 0b04 	subs.w	fp, sl, r4
 80096f8:	d00b      	beq.n	8009712 <_svfiprintf_r+0x7a>
 80096fa:	465b      	mov	r3, fp
 80096fc:	4622      	mov	r2, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ff6f 	bl	80095e4 <__ssputs_r>
 8009706:	3001      	adds	r0, #1
 8009708:	f000 80a9 	beq.w	800985e <_svfiprintf_r+0x1c6>
 800970c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800970e:	445a      	add	r2, fp
 8009710:	9209      	str	r2, [sp, #36]	; 0x24
 8009712:	f89a 3000 	ldrb.w	r3, [sl]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 80a1 	beq.w	800985e <_svfiprintf_r+0x1c6>
 800971c:	2300      	movs	r3, #0
 800971e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009726:	f10a 0a01 	add.w	sl, sl, #1
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	9307      	str	r3, [sp, #28]
 800972e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009732:	931a      	str	r3, [sp, #104]	; 0x68
 8009734:	4654      	mov	r4, sl
 8009736:	2205      	movs	r2, #5
 8009738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973c:	4850      	ldr	r0, [pc, #320]	; (8009880 <_svfiprintf_r+0x1e8>)
 800973e:	f7f6 fd4f 	bl	80001e0 <memchr>
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	b9d8      	cbnz	r0, 800977e <_svfiprintf_r+0xe6>
 8009746:	06d0      	lsls	r0, r2, #27
 8009748:	bf44      	itt	mi
 800974a:	2320      	movmi	r3, #32
 800974c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009750:	0711      	lsls	r1, r2, #28
 8009752:	bf44      	itt	mi
 8009754:	232b      	movmi	r3, #43	; 0x2b
 8009756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975a:	f89a 3000 	ldrb.w	r3, [sl]
 800975e:	2b2a      	cmp	r3, #42	; 0x2a
 8009760:	d015      	beq.n	800978e <_svfiprintf_r+0xf6>
 8009762:	9a07      	ldr	r2, [sp, #28]
 8009764:	4654      	mov	r4, sl
 8009766:	2000      	movs	r0, #0
 8009768:	f04f 0c0a 	mov.w	ip, #10
 800976c:	4621      	mov	r1, r4
 800976e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009772:	3b30      	subs	r3, #48	; 0x30
 8009774:	2b09      	cmp	r3, #9
 8009776:	d94d      	bls.n	8009814 <_svfiprintf_r+0x17c>
 8009778:	b1b0      	cbz	r0, 80097a8 <_svfiprintf_r+0x110>
 800977a:	9207      	str	r2, [sp, #28]
 800977c:	e014      	b.n	80097a8 <_svfiprintf_r+0x110>
 800977e:	eba0 0308 	sub.w	r3, r0, r8
 8009782:	fa09 f303 	lsl.w	r3, r9, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	46a2      	mov	sl, r4
 800978c:	e7d2      	b.n	8009734 <_svfiprintf_r+0x9c>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	9103      	str	r1, [sp, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	bfbb      	ittet	lt
 800979a:	425b      	neglt	r3, r3
 800979c:	f042 0202 	orrlt.w	r2, r2, #2
 80097a0:	9307      	strge	r3, [sp, #28]
 80097a2:	9307      	strlt	r3, [sp, #28]
 80097a4:	bfb8      	it	lt
 80097a6:	9204      	strlt	r2, [sp, #16]
 80097a8:	7823      	ldrb	r3, [r4, #0]
 80097aa:	2b2e      	cmp	r3, #46	; 0x2e
 80097ac:	d10c      	bne.n	80097c8 <_svfiprintf_r+0x130>
 80097ae:	7863      	ldrb	r3, [r4, #1]
 80097b0:	2b2a      	cmp	r3, #42	; 0x2a
 80097b2:	d134      	bne.n	800981e <_svfiprintf_r+0x186>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9203      	str	r2, [sp, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfb8      	it	lt
 80097c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097c4:	3402      	adds	r4, #2
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009890 <_svfiprintf_r+0x1f8>
 80097cc:	7821      	ldrb	r1, [r4, #0]
 80097ce:	2203      	movs	r2, #3
 80097d0:	4650      	mov	r0, sl
 80097d2:	f7f6 fd05 	bl	80001e0 <memchr>
 80097d6:	b138      	cbz	r0, 80097e8 <_svfiprintf_r+0x150>
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	eba0 000a 	sub.w	r0, r0, sl
 80097de:	2240      	movs	r2, #64	; 0x40
 80097e0:	4082      	lsls	r2, r0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	3401      	adds	r4, #1
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	4825      	ldr	r0, [pc, #148]	; (8009884 <_svfiprintf_r+0x1ec>)
 80097ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097f2:	2206      	movs	r2, #6
 80097f4:	f7f6 fcf4 	bl	80001e0 <memchr>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d038      	beq.n	800986e <_svfiprintf_r+0x1d6>
 80097fc:	4b22      	ldr	r3, [pc, #136]	; (8009888 <_svfiprintf_r+0x1f0>)
 80097fe:	bb1b      	cbnz	r3, 8009848 <_svfiprintf_r+0x1b0>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	3307      	adds	r3, #7
 8009804:	f023 0307 	bic.w	r3, r3, #7
 8009808:	3308      	adds	r3, #8
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980e:	4433      	add	r3, r6
 8009810:	9309      	str	r3, [sp, #36]	; 0x24
 8009812:	e768      	b.n	80096e6 <_svfiprintf_r+0x4e>
 8009814:	fb0c 3202 	mla	r2, ip, r2, r3
 8009818:	460c      	mov	r4, r1
 800981a:	2001      	movs	r0, #1
 800981c:	e7a6      	b.n	800976c <_svfiprintf_r+0xd4>
 800981e:	2300      	movs	r3, #0
 8009820:	3401      	adds	r4, #1
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	4619      	mov	r1, r3
 8009826:	f04f 0c0a 	mov.w	ip, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009830:	3a30      	subs	r2, #48	; 0x30
 8009832:	2a09      	cmp	r2, #9
 8009834:	d903      	bls.n	800983e <_svfiprintf_r+0x1a6>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0c6      	beq.n	80097c8 <_svfiprintf_r+0x130>
 800983a:	9105      	str	r1, [sp, #20]
 800983c:	e7c4      	b.n	80097c8 <_svfiprintf_r+0x130>
 800983e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009842:	4604      	mov	r4, r0
 8009844:	2301      	movs	r3, #1
 8009846:	e7f0      	b.n	800982a <_svfiprintf_r+0x192>
 8009848:	ab03      	add	r3, sp, #12
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	462a      	mov	r2, r5
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <_svfiprintf_r+0x1f4>)
 8009850:	a904      	add	r1, sp, #16
 8009852:	4638      	mov	r0, r7
 8009854:	f3af 8000 	nop.w
 8009858:	1c42      	adds	r2, r0, #1
 800985a:	4606      	mov	r6, r0
 800985c:	d1d6      	bne.n	800980c <_svfiprintf_r+0x174>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	065b      	lsls	r3, r3, #25
 8009862:	f53f af2d 	bmi.w	80096c0 <_svfiprintf_r+0x28>
 8009866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009868:	b01d      	add	sp, #116	; 0x74
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	ab03      	add	r3, sp, #12
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	462a      	mov	r2, r5
 8009874:	4b05      	ldr	r3, [pc, #20]	; (800988c <_svfiprintf_r+0x1f4>)
 8009876:	a904      	add	r1, sp, #16
 8009878:	4638      	mov	r0, r7
 800987a:	f000 f879 	bl	8009970 <_printf_i>
 800987e:	e7eb      	b.n	8009858 <_svfiprintf_r+0x1c0>
 8009880:	08009d1c 	.word	0x08009d1c
 8009884:	08009d26 	.word	0x08009d26
 8009888:	00000000 	.word	0x00000000
 800988c:	080095e5 	.word	0x080095e5
 8009890:	08009d22 	.word	0x08009d22

08009894 <_printf_common>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	4616      	mov	r6, r2
 800989a:	4699      	mov	r9, r3
 800989c:	688a      	ldr	r2, [r1, #8]
 800989e:	690b      	ldr	r3, [r1, #16]
 80098a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	bfb8      	it	lt
 80098a8:	4613      	movlt	r3, r2
 80098aa:	6033      	str	r3, [r6, #0]
 80098ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b0:	4607      	mov	r7, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b10a      	cbz	r2, 80098ba <_printf_common+0x26>
 80098b6:	3301      	adds	r3, #1
 80098b8:	6033      	str	r3, [r6, #0]
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	0699      	lsls	r1, r3, #26
 80098be:	bf42      	ittt	mi
 80098c0:	6833      	ldrmi	r3, [r6, #0]
 80098c2:	3302      	addmi	r3, #2
 80098c4:	6033      	strmi	r3, [r6, #0]
 80098c6:	6825      	ldr	r5, [r4, #0]
 80098c8:	f015 0506 	ands.w	r5, r5, #6
 80098cc:	d106      	bne.n	80098dc <_printf_common+0x48>
 80098ce:	f104 0a19 	add.w	sl, r4, #25
 80098d2:	68e3      	ldr	r3, [r4, #12]
 80098d4:	6832      	ldr	r2, [r6, #0]
 80098d6:	1a9b      	subs	r3, r3, r2
 80098d8:	42ab      	cmp	r3, r5
 80098da:	dc26      	bgt.n	800992a <_printf_common+0x96>
 80098dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e0:	1e13      	subs	r3, r2, #0
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	0692      	lsls	r2, r2, #26
 80098ea:	d42b      	bmi.n	8009944 <_printf_common+0xb0>
 80098ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f0:	4649      	mov	r1, r9
 80098f2:	4638      	mov	r0, r7
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d01e      	beq.n	8009938 <_printf_common+0xa4>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	f003 0306 	and.w	r3, r3, #6
 8009902:	2b04      	cmp	r3, #4
 8009904:	bf02      	ittt	eq
 8009906:	68e5      	ldreq	r5, [r4, #12]
 8009908:	6833      	ldreq	r3, [r6, #0]
 800990a:	1aed      	subeq	r5, r5, r3
 800990c:	68a3      	ldr	r3, [r4, #8]
 800990e:	bf0c      	ite	eq
 8009910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009914:	2500      	movne	r5, #0
 8009916:	4293      	cmp	r3, r2
 8009918:	bfc4      	itt	gt
 800991a:	1a9b      	subgt	r3, r3, r2
 800991c:	18ed      	addgt	r5, r5, r3
 800991e:	2600      	movs	r6, #0
 8009920:	341a      	adds	r4, #26
 8009922:	42b5      	cmp	r5, r6
 8009924:	d11a      	bne.n	800995c <_printf_common+0xc8>
 8009926:	2000      	movs	r0, #0
 8009928:	e008      	b.n	800993c <_printf_common+0xa8>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4649      	mov	r1, r9
 8009930:	4638      	mov	r0, r7
 8009932:	47c0      	blx	r8
 8009934:	3001      	adds	r0, #1
 8009936:	d103      	bne.n	8009940 <_printf_common+0xac>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	3501      	adds	r5, #1
 8009942:	e7c6      	b.n	80098d2 <_printf_common+0x3e>
 8009944:	18e1      	adds	r1, r4, r3
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	2030      	movs	r0, #48	; 0x30
 800994a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800994e:	4422      	add	r2, r4
 8009950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009958:	3302      	adds	r3, #2
 800995a:	e7c7      	b.n	80098ec <_printf_common+0x58>
 800995c:	2301      	movs	r3, #1
 800995e:	4622      	mov	r2, r4
 8009960:	4649      	mov	r1, r9
 8009962:	4638      	mov	r0, r7
 8009964:	47c0      	blx	r8
 8009966:	3001      	adds	r0, #1
 8009968:	d0e6      	beq.n	8009938 <_printf_common+0xa4>
 800996a:	3601      	adds	r6, #1
 800996c:	e7d9      	b.n	8009922 <_printf_common+0x8e>
	...

08009970 <_printf_i>:
 8009970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	7e0f      	ldrb	r7, [r1, #24]
 8009976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009978:	2f78      	cmp	r7, #120	; 0x78
 800997a:	4691      	mov	r9, r2
 800997c:	4680      	mov	r8, r0
 800997e:	460c      	mov	r4, r1
 8009980:	469a      	mov	sl, r3
 8009982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009986:	d807      	bhi.n	8009998 <_printf_i+0x28>
 8009988:	2f62      	cmp	r7, #98	; 0x62
 800998a:	d80a      	bhi.n	80099a2 <_printf_i+0x32>
 800998c:	2f00      	cmp	r7, #0
 800998e:	f000 80d4 	beq.w	8009b3a <_printf_i+0x1ca>
 8009992:	2f58      	cmp	r7, #88	; 0x58
 8009994:	f000 80c0 	beq.w	8009b18 <_printf_i+0x1a8>
 8009998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a0:	e03a      	b.n	8009a18 <_printf_i+0xa8>
 80099a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099a6:	2b15      	cmp	r3, #21
 80099a8:	d8f6      	bhi.n	8009998 <_printf_i+0x28>
 80099aa:	a101      	add	r1, pc, #4	; (adr r1, 80099b0 <_printf_i+0x40>)
 80099ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099b0:	08009a09 	.word	0x08009a09
 80099b4:	08009a1d 	.word	0x08009a1d
 80099b8:	08009999 	.word	0x08009999
 80099bc:	08009999 	.word	0x08009999
 80099c0:	08009999 	.word	0x08009999
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009a1d 	.word	0x08009a1d
 80099cc:	08009999 	.word	0x08009999
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009b21 	.word	0x08009b21
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	08009adb 	.word	0x08009adb
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009999 	.word	0x08009999
 80099f0:	08009b43 	.word	0x08009b43
 80099f4:	08009999 	.word	0x08009999
 80099f8:	08009a49 	.word	0x08009a49
 80099fc:	08009999 	.word	0x08009999
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009ae3 	.word	0x08009ae3
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	1d1a      	adds	r2, r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	602a      	str	r2, [r5, #0]
 8009a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e09f      	b.n	8009b5c <_printf_i+0x1ec>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	0607      	lsls	r7, r0, #24
 8009a22:	f103 0104 	add.w	r1, r3, #4
 8009a26:	6029      	str	r1, [r5, #0]
 8009a28:	d501      	bpl.n	8009a2e <_printf_i+0xbe>
 8009a2a:	681e      	ldr	r6, [r3, #0]
 8009a2c:	e003      	b.n	8009a36 <_printf_i+0xc6>
 8009a2e:	0646      	lsls	r6, r0, #25
 8009a30:	d5fb      	bpl.n	8009a2a <_printf_i+0xba>
 8009a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	da03      	bge.n	8009a42 <_printf_i+0xd2>
 8009a3a:	232d      	movs	r3, #45	; 0x2d
 8009a3c:	4276      	negs	r6, r6
 8009a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a42:	485a      	ldr	r0, [pc, #360]	; (8009bac <_printf_i+0x23c>)
 8009a44:	230a      	movs	r3, #10
 8009a46:	e012      	b.n	8009a6e <_printf_i+0xfe>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	6029      	str	r1, [r5, #0]
 8009a50:	0605      	lsls	r5, r0, #24
 8009a52:	d501      	bpl.n	8009a58 <_printf_i+0xe8>
 8009a54:	681e      	ldr	r6, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <_printf_i+0xee>
 8009a58:	0641      	lsls	r1, r0, #25
 8009a5a:	d5fb      	bpl.n	8009a54 <_printf_i+0xe4>
 8009a5c:	881e      	ldrh	r6, [r3, #0]
 8009a5e:	4853      	ldr	r0, [pc, #332]	; (8009bac <_printf_i+0x23c>)
 8009a60:	2f6f      	cmp	r7, #111	; 0x6f
 8009a62:	bf0c      	ite	eq
 8009a64:	2308      	moveq	r3, #8
 8009a66:	230a      	movne	r3, #10
 8009a68:	2100      	movs	r1, #0
 8009a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a6e:	6865      	ldr	r5, [r4, #4]
 8009a70:	60a5      	str	r5, [r4, #8]
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	bfa2      	ittt	ge
 8009a76:	6821      	ldrge	r1, [r4, #0]
 8009a78:	f021 0104 	bicge.w	r1, r1, #4
 8009a7c:	6021      	strge	r1, [r4, #0]
 8009a7e:	b90e      	cbnz	r6, 8009a84 <_printf_i+0x114>
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	d04b      	beq.n	8009b1c <_printf_i+0x1ac>
 8009a84:	4615      	mov	r5, r2
 8009a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8009a8e:	5dc7      	ldrb	r7, [r0, r7]
 8009a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a94:	4637      	mov	r7, r6
 8009a96:	42bb      	cmp	r3, r7
 8009a98:	460e      	mov	r6, r1
 8009a9a:	d9f4      	bls.n	8009a86 <_printf_i+0x116>
 8009a9c:	2b08      	cmp	r3, #8
 8009a9e:	d10b      	bne.n	8009ab8 <_printf_i+0x148>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	07de      	lsls	r6, r3, #31
 8009aa4:	d508      	bpl.n	8009ab8 <_printf_i+0x148>
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	6861      	ldr	r1, [r4, #4]
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	bfde      	ittt	le
 8009aae:	2330      	movle	r3, #48	; 0x30
 8009ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ab4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ab8:	1b52      	subs	r2, r2, r5
 8009aba:	6122      	str	r2, [r4, #16]
 8009abc:	f8cd a000 	str.w	sl, [sp]
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	aa03      	add	r2, sp, #12
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f7ff fee4 	bl	8009894 <_printf_common>
 8009acc:	3001      	adds	r0, #1
 8009ace:	d14a      	bne.n	8009b66 <_printf_i+0x1f6>
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad4:	b004      	add	sp, #16
 8009ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	f043 0320 	orr.w	r3, r3, #32
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	4833      	ldr	r0, [pc, #204]	; (8009bb0 <_printf_i+0x240>)
 8009ae4:	2778      	movs	r7, #120	; 0x78
 8009ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	6829      	ldr	r1, [r5, #0]
 8009aee:	061f      	lsls	r7, r3, #24
 8009af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009af4:	d402      	bmi.n	8009afc <_printf_i+0x18c>
 8009af6:	065f      	lsls	r7, r3, #25
 8009af8:	bf48      	it	mi
 8009afa:	b2b6      	uxthmi	r6, r6
 8009afc:	07df      	lsls	r7, r3, #31
 8009afe:	bf48      	it	mi
 8009b00:	f043 0320 	orrmi.w	r3, r3, #32
 8009b04:	6029      	str	r1, [r5, #0]
 8009b06:	bf48      	it	mi
 8009b08:	6023      	strmi	r3, [r4, #0]
 8009b0a:	b91e      	cbnz	r6, 8009b14 <_printf_i+0x1a4>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	f023 0320 	bic.w	r3, r3, #32
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	2310      	movs	r3, #16
 8009b16:	e7a7      	b.n	8009a68 <_printf_i+0xf8>
 8009b18:	4824      	ldr	r0, [pc, #144]	; (8009bac <_printf_i+0x23c>)
 8009b1a:	e7e4      	b.n	8009ae6 <_printf_i+0x176>
 8009b1c:	4615      	mov	r5, r2
 8009b1e:	e7bd      	b.n	8009a9c <_printf_i+0x12c>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	6826      	ldr	r6, [r4, #0]
 8009b24:	6961      	ldr	r1, [r4, #20]
 8009b26:	1d18      	adds	r0, r3, #4
 8009b28:	6028      	str	r0, [r5, #0]
 8009b2a:	0635      	lsls	r5, r6, #24
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	d501      	bpl.n	8009b34 <_printf_i+0x1c4>
 8009b30:	6019      	str	r1, [r3, #0]
 8009b32:	e002      	b.n	8009b3a <_printf_i+0x1ca>
 8009b34:	0670      	lsls	r0, r6, #25
 8009b36:	d5fb      	bpl.n	8009b30 <_printf_i+0x1c0>
 8009b38:	8019      	strh	r1, [r3, #0]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	4615      	mov	r5, r2
 8009b40:	e7bc      	b.n	8009abc <_printf_i+0x14c>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	1d1a      	adds	r2, r3, #4
 8009b46:	602a      	str	r2, [r5, #0]
 8009b48:	681d      	ldr	r5, [r3, #0]
 8009b4a:	6862      	ldr	r2, [r4, #4]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f7f6 fb46 	bl	80001e0 <memchr>
 8009b54:	b108      	cbz	r0, 8009b5a <_printf_i+0x1ea>
 8009b56:	1b40      	subs	r0, r0, r5
 8009b58:	6060      	str	r0, [r4, #4]
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	6123      	str	r3, [r4, #16]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b64:	e7aa      	b.n	8009abc <_printf_i+0x14c>
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	462a      	mov	r2, r5
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	47d0      	blx	sl
 8009b70:	3001      	adds	r0, #1
 8009b72:	d0ad      	beq.n	8009ad0 <_printf_i+0x160>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	079b      	lsls	r3, r3, #30
 8009b78:	d413      	bmi.n	8009ba2 <_printf_i+0x232>
 8009b7a:	68e0      	ldr	r0, [r4, #12]
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	4298      	cmp	r0, r3
 8009b80:	bfb8      	it	lt
 8009b82:	4618      	movlt	r0, r3
 8009b84:	e7a6      	b.n	8009ad4 <_printf_i+0x164>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4632      	mov	r2, r6
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	47d0      	blx	sl
 8009b90:	3001      	adds	r0, #1
 8009b92:	d09d      	beq.n	8009ad0 <_printf_i+0x160>
 8009b94:	3501      	adds	r5, #1
 8009b96:	68e3      	ldr	r3, [r4, #12]
 8009b98:	9903      	ldr	r1, [sp, #12]
 8009b9a:	1a5b      	subs	r3, r3, r1
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	dcf2      	bgt.n	8009b86 <_printf_i+0x216>
 8009ba0:	e7eb      	b.n	8009b7a <_printf_i+0x20a>
 8009ba2:	2500      	movs	r5, #0
 8009ba4:	f104 0619 	add.w	r6, r4, #25
 8009ba8:	e7f5      	b.n	8009b96 <_printf_i+0x226>
 8009baa:	bf00      	nop
 8009bac:	08009d2d 	.word	0x08009d2d
 8009bb0:	08009d3e 	.word	0x08009d3e

08009bb4 <memmove>:
 8009bb4:	4288      	cmp	r0, r1
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	eb01 0402 	add.w	r4, r1, r2
 8009bbc:	d902      	bls.n	8009bc4 <memmove+0x10>
 8009bbe:	4284      	cmp	r4, r0
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	d807      	bhi.n	8009bd4 <memmove+0x20>
 8009bc4:	1e43      	subs	r3, r0, #1
 8009bc6:	42a1      	cmp	r1, r4
 8009bc8:	d008      	beq.n	8009bdc <memmove+0x28>
 8009bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bd2:	e7f8      	b.n	8009bc6 <memmove+0x12>
 8009bd4:	4402      	add	r2, r0
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	428a      	cmp	r2, r1
 8009bda:	d100      	bne.n	8009bde <memmove+0x2a>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009be6:	e7f7      	b.n	8009bd8 <memmove+0x24>

08009be8 <_sbrk_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_sbrk_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f7 f9ca 	bl	8000f8c <_sbrk>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_sbrk_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_sbrk_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200040fc 	.word	0x200040fc

08009c08 <memcpy>:
 8009c08:	440a      	add	r2, r1
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c10:	d100      	bne.n	8009c14 <memcpy+0xc>
 8009c12:	4770      	bx	lr
 8009c14:	b510      	push	{r4, lr}
 8009c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	d1f9      	bne.n	8009c16 <memcpy+0xe>
 8009c22:	bd10      	pop	{r4, pc}

08009c24 <_realloc_r>:
 8009c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c28:	4680      	mov	r8, r0
 8009c2a:	4614      	mov	r4, r2
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	b921      	cbnz	r1, 8009c3a <_realloc_r+0x16>
 8009c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	4611      	mov	r1, r2
 8009c36:	f7ff bc49 	b.w	80094cc <_malloc_r>
 8009c3a:	b92a      	cbnz	r2, 8009c48 <_realloc_r+0x24>
 8009c3c:	f7ff fbda 	bl	80093f4 <_free_r>
 8009c40:	4625      	mov	r5, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c48:	f000 f81b 	bl	8009c82 <_malloc_usable_size_r>
 8009c4c:	4284      	cmp	r4, r0
 8009c4e:	4607      	mov	r7, r0
 8009c50:	d802      	bhi.n	8009c58 <_realloc_r+0x34>
 8009c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c56:	d812      	bhi.n	8009c7e <_realloc_r+0x5a>
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f7ff fc36 	bl	80094cc <_malloc_r>
 8009c60:	4605      	mov	r5, r0
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d0ed      	beq.n	8009c42 <_realloc_r+0x1e>
 8009c66:	42bc      	cmp	r4, r7
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	bf28      	it	cs
 8009c6e:	463a      	movcs	r2, r7
 8009c70:	f7ff ffca 	bl	8009c08 <memcpy>
 8009c74:	4631      	mov	r1, r6
 8009c76:	4640      	mov	r0, r8
 8009c78:	f7ff fbbc 	bl	80093f4 <_free_r>
 8009c7c:	e7e1      	b.n	8009c42 <_realloc_r+0x1e>
 8009c7e:	4635      	mov	r5, r6
 8009c80:	e7df      	b.n	8009c42 <_realloc_r+0x1e>

08009c82 <_malloc_usable_size_r>:
 8009c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c86:	1f18      	subs	r0, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfbc      	itt	lt
 8009c8c:	580b      	ldrlt	r3, [r1, r0]
 8009c8e:	18c0      	addlt	r0, r0, r3
 8009c90:	4770      	bx	lr
	...

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
